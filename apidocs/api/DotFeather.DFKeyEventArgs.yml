### YamlMime:ManagedReference
items:
  - uid: DotFeather.DFKeyEventArgs
    commentId: T:DotFeather.DFKeyEventArgs
    id: DFKeyEventArgs
    parent: DotFeather
    children:
      - DotFeather.DFKeyEventArgs.AltPressed
      - DotFeather.DFKeyEventArgs.CtrlPressed
      - DotFeather.DFKeyEventArgs.Key
      - DotFeather.DFKeyEventArgs.ShiftPressed
    langs:
      - csharp
      - vb
    name: DFKeyEventArgs
    nameWithType: DFKeyEventArgs
    fullName: DotFeather.DFKeyEventArgs
    type: Class
    source:
      remote:
        path: DotFeather/InputSystems/DFKeyEventArgs.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: DFKeyEventArgs
      path: ../DotFeather/InputSystems/DFKeyEventArgs.cs
      startLine: 7
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nKeyboard event argument.\n"
    example: []
    syntax:
      content: "public class DFKeyEventArgs : EventArgs"
      content.vb: >-
        Public Class DFKeyEventArgs
            Inherits EventArgs
    inheritance:
      - System.Object
      - System.EventArgs
    inheritedMembers:
      - System.EventArgs.Empty
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - class
    modifiers.vb:
      - Public
      - Class
  - uid: DotFeather.DFKeyEventArgs.Key
    commentId: P:DotFeather.DFKeyEventArgs.Key
    id: Key
    parent: DotFeather.DFKeyEventArgs
    langs:
      - csharp
      - vb
    name: Key
    nameWithType: DFKeyEventArgs.Key
    fullName: DotFeather.DFKeyEventArgs.Key
    type: Property
    source:
      remote:
        path: DotFeather/InputSystems/DFKeyEventArgs.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Key
      path: ../DotFeather/InputSystems/DFKeyEventArgs.cs
      startLine: 12
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a pressed key.\n"
    example: []
    syntax:
      content: public DFKeyCode Key { get; }
      parameters: []
      return:
        type: DotFeather.DFKeyCode
      content.vb: Public ReadOnly Property Key As DFKeyCode
    overload: DotFeather.DFKeyEventArgs.Key*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.DFKeyEventArgs.AltPressed
    commentId: P:DotFeather.DFKeyEventArgs.AltPressed
    id: AltPressed
    parent: DotFeather.DFKeyEventArgs
    langs:
      - csharp
      - vb
    name: AltPressed
    nameWithType: DFKeyEventArgs.AltPressed
    fullName: DotFeather.DFKeyEventArgs.AltPressed
    type: Property
    source:
      remote:
        path: DotFeather/InputSystems/DFKeyEventArgs.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: AltPressed
      path: ../DotFeather/InputSystems/DFKeyEventArgs.cs
      startLine: 17
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGets a value indicating whether the Alt key was pressed.\n"
    example: []
    syntax:
      content: public bool AltPressed { get; }
      parameters: []
      return:
        type: System.Boolean
      content.vb: Public ReadOnly Property AltPressed As Boolean
    overload: DotFeather.DFKeyEventArgs.AltPressed*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.DFKeyEventArgs.CtrlPressed
    commentId: P:DotFeather.DFKeyEventArgs.CtrlPressed
    id: CtrlPressed
    parent: DotFeather.DFKeyEventArgs
    langs:
      - csharp
      - vb
    name: CtrlPressed
    nameWithType: DFKeyEventArgs.CtrlPressed
    fullName: DotFeather.DFKeyEventArgs.CtrlPressed
    type: Property
    source:
      remote:
        path: DotFeather/InputSystems/DFKeyEventArgs.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: CtrlPressed
      path: ../DotFeather/InputSystems/DFKeyEventArgs.cs
      startLine: 22
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGets a value indicating whether the Ctrl key was pressed.\n"
    example: []
    syntax:
      content: public bool CtrlPressed { get; }
      parameters: []
      return:
        type: System.Boolean
      content.vb: Public ReadOnly Property CtrlPressed As Boolean
    overload: DotFeather.DFKeyEventArgs.CtrlPressed*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.DFKeyEventArgs.ShiftPressed
    commentId: P:DotFeather.DFKeyEventArgs.ShiftPressed
    id: ShiftPressed
    parent: DotFeather.DFKeyEventArgs
    langs:
      - csharp
      - vb
    name: ShiftPressed
    nameWithType: DFKeyEventArgs.ShiftPressed
    fullName: DotFeather.DFKeyEventArgs.ShiftPressed
    type: Property
    source:
      remote:
        path: DotFeather/InputSystems/DFKeyEventArgs.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ShiftPressed
      path: ../DotFeather/InputSystems/DFKeyEventArgs.cs
      startLine: 27
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGets a value indicating whether the Shift key was pressed.\n"
    example: []
    syntax:
      content: public bool ShiftPressed { get; }
      parameters: []
      return:
        type: System.Boolean
      content.vb: Public ReadOnly Property ShiftPressed As Boolean
    overload: DotFeather.DFKeyEventArgs.ShiftPressed*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: System.EventArgs
    commentId: T:System.EventArgs
    parent: System
    isExternal: true
    name: EventArgs
    nameWithType: EventArgs
    fullName: System.EventArgs
  - uid: System.EventArgs.Empty
    commentId: F:System.EventArgs.Empty
    parent: System.EventArgs
    isExternal: true
    name: Empty
    nameWithType: EventArgs.Empty
    fullName: System.EventArgs.Empty
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.DFKeyEventArgs.Key*
    commentId: Overload:DotFeather.DFKeyEventArgs.Key
    name: Key
    nameWithType: DFKeyEventArgs.Key
    fullName: DotFeather.DFKeyEventArgs.Key
  - uid: DotFeather.DFKeyCode
    commentId: T:DotFeather.DFKeyCode
    parent: DotFeather
    name: DFKeyCode
    nameWithType: DFKeyCode
    fullName: DotFeather.DFKeyCode
  - uid: DotFeather.DFKeyEventArgs.AltPressed*
    commentId: Overload:DotFeather.DFKeyEventArgs.AltPressed
    name: AltPressed
    nameWithType: DFKeyEventArgs.AltPressed
    fullName: DotFeather.DFKeyEventArgs.AltPressed
  - uid: System.Boolean
    commentId: T:System.Boolean
    parent: System
    isExternal: true
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - uid: DotFeather.DFKeyEventArgs.CtrlPressed*
    commentId: Overload:DotFeather.DFKeyEventArgs.CtrlPressed
    name: CtrlPressed
    nameWithType: DFKeyEventArgs.CtrlPressed
    fullName: DotFeather.DFKeyEventArgs.CtrlPressed
  - uid: DotFeather.DFKeyEventArgs.ShiftPressed*
    commentId: Overload:DotFeather.DFKeyEventArgs.ShiftPressed
    name: ShiftPressed
    nameWithType: DFKeyEventArgs.ShiftPressed
    fullName: DotFeather.DFKeyEventArgs.ShiftPressed
