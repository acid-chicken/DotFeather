### YamlMime:ManagedReference
items:
  - uid: DotFeather.Scene
    commentId: T:DotFeather.Scene
    id: Scene
    parent: DotFeather
    children:
      - DotFeather.Scene.BackgroundColor
      - DotFeather.Scene.OnDestroy(DotFeather.Router)
      - DotFeather.Scene.OnStart(DotFeather.Router,DotFeather.GameBase,System.Collections.Generic.Dictionary{System.String,System.Object})
      - DotFeather.Scene.OnUpdate(DotFeather.Router,DotFeather.GameBase,DotFeather.DFEventArgs)
      - DotFeather.Scene.Random
      - DotFeather.Scene.Randomize(System.Nullable{System.Int32})
      - DotFeather.Scene.Root
      - DotFeather.Scene.Title
    langs:
      - csharp
      - vb
    name: Scene
    nameWithType: Scene
    fullName: DotFeather.Scene
    type: Class
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Scene
      path: ../DotFeather/Router/Scene.cs
      startLine: 9
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nAbstract scene class.\n"
    example: []
    syntax:
      content: public abstract class Scene
      content.vb: Public MustInherit Class Scene
    inheritance:
      - System.Object
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - abstract
      - class
    modifiers.vb:
      - Public
      - MustInherit
      - Class
  - uid: DotFeather.Scene.Root
    commentId: P:DotFeather.Scene.Root
    id: Root
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: Root
    nameWithType: Scene.Root
    fullName: DotFeather.Scene.Root
    type: Property
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Root
      path: ../DotFeather/Router/Scene.cs
      startLine: 14
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a root container of this scene.\n"
    example: []
    syntax:
      content: public Container Root { get; }
      parameters: []
      return:
        type: DotFeather.Container
      content.vb: Public ReadOnly Property Root As Container
    overload: DotFeather.Scene.Root*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Scene.Random
    commentId: P:DotFeather.Scene.Random
    id: Random
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: Random
    nameWithType: Scene.Random
    fullName: DotFeather.Scene.Random
    type: Property
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Random
      path: ../DotFeather/Router/Scene.cs
      startLine: 19
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a random generator.\n"
    example: []
    syntax:
      content: public Random Random { get; }
      parameters: []
      return:
        type: System.Random
      content.vb: Public ReadOnly Property Random As Random
    overload: DotFeather.Scene.Random*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Scene.BackgroundColor
    commentId: P:DotFeather.Scene.BackgroundColor
    id: BackgroundColor
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: BackgroundColor
    nameWithType: Scene.BackgroundColor
    fullName: DotFeather.Scene.BackgroundColor
    type: Property
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: BackgroundColor
      path: ../DotFeather/Router/Scene.cs
      startLine: 24
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set background color.\n"
    example: []
    syntax:
      content: public Color? BackgroundColor { get; set; }
      parameters: []
      return:
        type: System.Nullable{System.Drawing.Color}
      content.vb: Public Property BackgroundColor As Color?
    overload: DotFeather.Scene.BackgroundColor*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Scene.Title
    commentId: P:DotFeather.Scene.Title
    id: Title
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: Title
    nameWithType: Scene.Title
    fullName: DotFeather.Scene.Title
    type: Property
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Title
      path: ../DotFeather/Router/Scene.cs
      startLine: 29
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set window title.\n"
    example: []
    syntax:
      content: public string Title { get; set; }
      parameters: []
      return:
        type: System.String
      content.vb: Public Property Title As String
    overload: DotFeather.Scene.Title*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Scene.Randomize(System.Nullable{System.Int32})
    commentId: M:DotFeather.Scene.Randomize(System.Nullable{System.Int32})
    id: Randomize(System.Nullable{System.Int32})
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: Randomize(Nullable<Int32>)
    nameWithType: Scene.Randomize(Nullable<Int32>)
    fullName: DotFeather.Scene.Randomize(System.Nullable<System.Int32>)
    type: Method
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Randomize
      path: ../DotFeather/Router/Scene.cs
      startLine: 35
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nInitialize the random generator.\n"
    example: []
    syntax:
      content: public void Randomize(int? seed = default(int? ))
      parameters:
        - id: seed
          type: System.Nullable{System.Int32}
          description: 'Seed value. If not specified, using a default constructor of <xref href="DotFeather.Scene.Random" data-throw-if-not-resolved="false"></xref> to initialize. '
      content.vb: Public Sub Randomize(seed As Integer? = Nothing)
    overload: DotFeather.Scene.Randomize*
    nameWithType.vb: Scene.Randomize(Nullable(Of Int32))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Scene.Randomize(System.Nullable(Of System.Int32))
    name.vb: Randomize(Nullable(Of Int32))
  - uid: DotFeather.Scene.OnStart(DotFeather.Router,DotFeather.GameBase,System.Collections.Generic.Dictionary{System.String,System.Object})
    commentId: M:DotFeather.Scene.OnStart(DotFeather.Router,DotFeather.GameBase,System.Collections.Generic.Dictionary{System.String,System.Object})
    id: OnStart(DotFeather.Router,DotFeather.GameBase,System.Collections.Generic.Dictionary{System.String,System.Object})
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: OnStart(Router, GameBase, Dictionary<String, Object>)
    nameWithType: Scene.OnStart(Router, GameBase, Dictionary<String, Object>)
    fullName: DotFeather.Scene.OnStart(DotFeather.Router, DotFeather.GameBase, System.Collections.Generic.Dictionary<System.String, System.Object>)
    type: Method
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: OnStart
      path: ../DotFeather/Router/Scene.cs
      startLine: 43
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nCalled when the scene starts.\n"
    example: []
    syntax:
      content: public virtual void OnStart(Router router, GameBase game, Dictionary<string, object> args)
      parameters:
        - id: router
          type: DotFeather.Router
        - id: game
          type: DotFeather.GameBase
        - id: args
          type: System.Collections.Generic.Dictionary{System.String,System.Object}
      content.vb: Public Overridable Sub OnStart(router As Router, game As GameBase, args As Dictionary(Of String, Object))
    overload: DotFeather.Scene.OnStart*
    nameWithType.vb: Scene.OnStart(Router, GameBase, Dictionary(Of String, Object))
    modifiers.csharp:
      - public
      - virtual
    modifiers.vb:
      - Public
      - Overridable
    fullName.vb: DotFeather.Scene.OnStart(DotFeather.Router, DotFeather.GameBase, System.Collections.Generic.Dictionary(Of System.String, System.Object))
    name.vb: OnStart(Router, GameBase, Dictionary(Of String, Object))
  - uid: DotFeather.Scene.OnUpdate(DotFeather.Router,DotFeather.GameBase,DotFeather.DFEventArgs)
    commentId: M:DotFeather.Scene.OnUpdate(DotFeather.Router,DotFeather.GameBase,DotFeather.DFEventArgs)
    id: OnUpdate(DotFeather.Router,DotFeather.GameBase,DotFeather.DFEventArgs)
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: OnUpdate(Router, GameBase, DFEventArgs)
    nameWithType: Scene.OnUpdate(Router, GameBase, DFEventArgs)
    fullName: DotFeather.Scene.OnUpdate(DotFeather.Router, DotFeather.GameBase, DotFeather.DFEventArgs)
    type: Method
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: OnUpdate
      path: ../DotFeather/Router/Scene.cs
      startLine: 48
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nCalled when updating frame of the scene.\n"
    example: []
    syntax:
      content: public virtual void OnUpdate(Router router, GameBase game, DFEventArgs e)
      parameters:
        - id: router
          type: DotFeather.Router
        - id: game
          type: DotFeather.GameBase
        - id: e
          type: DotFeather.DFEventArgs
      content.vb: Public Overridable Sub OnUpdate(router As Router, game As GameBase, e As DFEventArgs)
    overload: DotFeather.Scene.OnUpdate*
    modifiers.csharp:
      - public
      - virtual
    modifiers.vb:
      - Public
      - Overridable
  - uid: DotFeather.Scene.OnDestroy(DotFeather.Router)
    commentId: M:DotFeather.Scene.OnDestroy(DotFeather.Router)
    id: OnDestroy(DotFeather.Router)
    parent: DotFeather.Scene
    langs:
      - csharp
      - vb
    name: OnDestroy(Router)
    nameWithType: Scene.OnDestroy(Router)
    fullName: DotFeather.Scene.OnDestroy(DotFeather.Router)
    type: Method
    source:
      remote:
        path: DotFeather/Router/Scene.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: OnDestroy
      path: ../DotFeather/Router/Scene.cs
      startLine: 53
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nCalled when the scene is disposed.\n"
    example: []
    syntax:
      content: public virtual void OnDestroy(Router router)
      parameters:
        - id: router
          type: DotFeather.Router
      content.vb: Public Overridable Sub OnDestroy(router As Router)
    overload: DotFeather.Scene.OnDestroy*
    modifiers.csharp:
      - public
      - virtual
    modifiers.vb:
      - Public
      - Overridable
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.Scene.Root*
    commentId: Overload:DotFeather.Scene.Root
    name: Root
    nameWithType: Scene.Root
    fullName: DotFeather.Scene.Root
  - uid: DotFeather.Container
    commentId: T:DotFeather.Container
    parent: DotFeather
    name: Container
    nameWithType: Container
    fullName: DotFeather.Container
  - uid: DotFeather.Scene.Random*
    commentId: Overload:DotFeather.Scene.Random
    name: Random
    nameWithType: Scene.Random
    fullName: DotFeather.Scene.Random
  - uid: System.Random
    commentId: T:System.Random
    parent: System
    isExternal: true
    name: Random
    nameWithType: Random
    fullName: System.Random
  - uid: DotFeather.Scene.BackgroundColor*
    commentId: Overload:DotFeather.Scene.BackgroundColor
    name: BackgroundColor
    nameWithType: Scene.BackgroundColor
    fullName: DotFeather.Scene.BackgroundColor
  - uid: System.Nullable{System.Drawing.Color}
    commentId: T:System.Nullable{System.Drawing.Color}
    parent: System
    definition: System.Nullable`1
    name: Nullable<Color>
    nameWithType: Nullable<Color>
    fullName: System.Nullable<System.Drawing.Color>
    nameWithType.vb: Nullable(Of Color)
    fullName.vb: System.Nullable(Of System.Drawing.Color)
    name.vb: Nullable(Of Color)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Drawing.Color
        name: Color
        nameWithType: Color
        fullName: System.Drawing.Color
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Drawing.Color
        name: Color
        nameWithType: Color
        fullName: System.Drawing.Color
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Nullable`1
    commentId: T:System.Nullable`1
    isExternal: true
    name: Nullable<T>
    nameWithType: Nullable<T>
    fullName: System.Nullable<T>
    nameWithType.vb: Nullable(Of T)
    fullName.vb: System.Nullable(Of T)
    name.vb: Nullable(Of T)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Scene.Title*
    commentId: Overload:DotFeather.Scene.Title
    name: Title
    nameWithType: Scene.Title
    fullName: DotFeather.Scene.Title
  - uid: System.String
    commentId: T:System.String
    parent: System
    isExternal: true
    name: String
    nameWithType: String
    fullName: System.String
  - uid: DotFeather.Scene.Random
    commentId: P:DotFeather.Scene.Random
    isExternal: true
  - uid: DotFeather.Scene.Randomize*
    commentId: Overload:DotFeather.Scene.Randomize
    name: Randomize
    nameWithType: Scene.Randomize
    fullName: DotFeather.Scene.Randomize
  - uid: System.Nullable{System.Int32}
    commentId: T:System.Nullable{System.Int32}
    parent: System
    definition: System.Nullable`1
    name: Nullable<Int32>
    nameWithType: Nullable<Int32>
    fullName: System.Nullable<System.Int32>
    nameWithType.vb: Nullable(Of Int32)
    fullName.vb: System.Nullable(Of System.Int32)
    name.vb: Nullable(Of Int32)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Scene.OnStart*
    commentId: Overload:DotFeather.Scene.OnStart
    name: OnStart
    nameWithType: Scene.OnStart
    fullName: DotFeather.Scene.OnStart
  - uid: DotFeather.Router
    commentId: T:DotFeather.Router
    parent: DotFeather
    name: Router
    nameWithType: Router
    fullName: DotFeather.Router
  - uid: DotFeather.GameBase
    commentId: T:DotFeather.GameBase
    parent: DotFeather
    name: GameBase
    nameWithType: GameBase
    fullName: DotFeather.GameBase
  - uid: System.Collections.Generic.Dictionary{System.String,System.Object}
    commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
    parent: System.Collections.Generic
    definition: System.Collections.Generic.Dictionary`2
    name: Dictionary<String, Object>
    nameWithType: Dictionary<String, Object>
    fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
    nameWithType.vb: Dictionary(Of String, Object)
    fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
    name.vb: Dictionary(Of String, Object)
    spec.csharp:
      - uid: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        fullName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.String
        name: String
        nameWithType: String
        fullName: System.String
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        fullName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.String
        name: String
        nameWithType: String
        fullName: System.String
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Collections.Generic.Dictionary`2
    commentId: T:System.Collections.Generic.Dictionary`2
    isExternal: true
    name: Dictionary<TKey, TValue>
    nameWithType: Dictionary<TKey, TValue>
    fullName: System.Collections.Generic.Dictionary<TKey, TValue>
    nameWithType.vb: Dictionary(Of TKey, TValue)
    fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
    name.vb: Dictionary(Of TKey, TValue)
    spec.csharp:
      - uid: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        fullName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: TKey
        nameWithType: TKey
        fullName: TKey
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - name: TValue
        nameWithType: TValue
        fullName: TValue
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Collections.Generic.Dictionary`2
        name: Dictionary
        nameWithType: Dictionary
        fullName: System.Collections.Generic.Dictionary
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: TKey
        nameWithType: TKey
        fullName: TKey
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - name: TValue
        nameWithType: TValue
        fullName: TValue
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Collections.Generic
    commentId: N:System.Collections.Generic
    isExternal: true
    name: System.Collections.Generic
    nameWithType: System.Collections.Generic
    fullName: System.Collections.Generic
  - uid: DotFeather.Scene.OnUpdate*
    commentId: Overload:DotFeather.Scene.OnUpdate
    name: OnUpdate
    nameWithType: Scene.OnUpdate
    fullName: DotFeather.Scene.OnUpdate
  - uid: DotFeather.DFEventArgs
    commentId: T:DotFeather.DFEventArgs
    parent: DotFeather
    name: DFEventArgs
    nameWithType: DFEventArgs
    fullName: DotFeather.DFEventArgs
  - uid: DotFeather.Scene.OnDestroy*
    commentId: Overload:DotFeather.Scene.OnDestroy
    name: OnDestroy
    nameWithType: Scene.OnDestroy
    fullName: DotFeather.Scene.OnDestroy
