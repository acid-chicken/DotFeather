### YamlMime:ManagedReference
items:
  - uid: DotFeather.RandomExtension
    commentId: T:DotFeather.RandomExtension
    id: RandomExtension
    parent: DotFeather
    children:
      - DotFeather.RandomExtension.NextColor(System.Random,System.Int32)
      - DotFeather.RandomExtension.NextVector(System.Random,System.Int32,System.Int32)
      - DotFeather.RandomExtension.NextVectorFloat(System.Random,System.Int32,System.Int32)
      - DotFeather.RandomExtension.NextVectorInt(System.Random,System.Int32,System.Int32)
    langs:
      - csharp
      - vb
    name: RandomExtension
    nameWithType: RandomExtension
    fullName: DotFeather.RandomExtension
    type: Class
    source:
      remote:
        path: DotFeather/Extensions/RandomExtension.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: RandomExtension
      path: ../DotFeather/Extensions/RandomExtension.cs
      startLine: 8
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nExtend the random number generator.\n"
    example: []
    syntax:
      content: public static class RandomExtension
      content.vb: Public Module RandomExtension
    inheritance:
      - System.Object
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - static
      - class
    modifiers.vb:
      - Public
      - Module
  - uid: DotFeather.RandomExtension.NextColor(System.Random,System.Int32)
    commentId: M:DotFeather.RandomExtension.NextColor(System.Random,System.Int32)
    id: NextColor(System.Random,System.Int32)
    isExtensionMethod: true
    parent: DotFeather.RandomExtension
    langs:
      - csharp
      - vb
    name: NextColor(Random, Int32)
    nameWithType: RandomExtension.NextColor(Random, Int32)
    fullName: DotFeather.RandomExtension.NextColor(System.Random, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Extensions/RandomExtension.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: NextColor
      path: ../DotFeather/Extensions/RandomExtension.cs
      startLine: 14
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a random color.\n"
    example: []
    syntax:
      content: public static Color NextColor(this Random r, int max = 256)
      parameters:
        - id: r
          type: System.Random
        - id: max
          type: System.Int32
      return:
        type: System.Drawing.Color
      content.vb: >-
        <ExtensionAttribute>

        Public Shared Function NextColor(r As Random, max As Integer = 256) As Color
    overload: DotFeather.RandomExtension.NextColor*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.RandomExtension.NextVector(System.Random,System.Int32,System.Int32)
    commentId: M:DotFeather.RandomExtension.NextVector(System.Random,System.Int32,System.Int32)
    id: NextVector(System.Random,System.Int32,System.Int32)
    isExtensionMethod: true
    parent: DotFeather.RandomExtension
    langs:
      - csharp
      - vb
    name: NextVector(Random, Int32, Int32)
    nameWithType: RandomExtension.NextVector(Random, Int32, Int32)
    fullName: DotFeather.RandomExtension.NextVector(System.Random, System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Extensions/RandomExtension.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: NextVector
      path: ../DotFeather/Extensions/RandomExtension.cs
      startLine: 19
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a random vector. Both x and y coords are integers.\n"
    example: []
    syntax:
      content: public static Vector NextVector(this Random r, int xMax, int yMax)
      parameters:
        - id: r
          type: System.Random
        - id: xMax
          type: System.Int32
        - id: yMax
          type: System.Int32
      return:
        type: DotFeather.Vector
      content.vb: >-
        <ExtensionAttribute>

        Public Shared Function NextVector(r As Random, xMax As Integer, yMax As Integer) As Vector
    overload: DotFeather.RandomExtension.NextVector*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.RandomExtension.NextVectorInt(System.Random,System.Int32,System.Int32)
    commentId: M:DotFeather.RandomExtension.NextVectorInt(System.Random,System.Int32,System.Int32)
    id: NextVectorInt(System.Random,System.Int32,System.Int32)
    isExtensionMethod: true
    parent: DotFeather.RandomExtension
    langs:
      - csharp
      - vb
    name: NextVectorInt(Random, Int32, Int32)
    nameWithType: RandomExtension.NextVectorInt(Random, Int32, Int32)
    fullName: DotFeather.RandomExtension.NextVectorInt(System.Random, System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Extensions/RandomExtension.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: NextVectorInt
      path: ../DotFeather/Extensions/RandomExtension.cs
      startLine: 24
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a random vector. Both x and y coords are integers.\n"
    example: []
    syntax:
      content: public static VectorInt NextVectorInt(this Random r, int xMax, int yMax)
      parameters:
        - id: r
          type: System.Random
        - id: xMax
          type: System.Int32
        - id: yMax
          type: System.Int32
      return:
        type: DotFeather.VectorInt
      content.vb: >-
        <ExtensionAttribute>

        Public Shared Function NextVectorInt(r As Random, xMax As Integer, yMax As Integer) As VectorInt
    overload: DotFeather.RandomExtension.NextVectorInt*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.RandomExtension.NextVectorFloat(System.Random,System.Int32,System.Int32)
    commentId: M:DotFeather.RandomExtension.NextVectorFloat(System.Random,System.Int32,System.Int32)
    id: NextVectorFloat(System.Random,System.Int32,System.Int32)
    isExtensionMethod: true
    parent: DotFeather.RandomExtension
    langs:
      - csharp
      - vb
    name: NextVectorFloat(Random, Int32, Int32)
    nameWithType: RandomExtension.NextVectorFloat(Random, Int32, Int32)
    fullName: DotFeather.RandomExtension.NextVectorFloat(System.Random, System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Extensions/RandomExtension.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: NextVectorFloat
      path: ../DotFeather/Extensions/RandomExtension.cs
      startLine: 29
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a random vector. Both x and y coords are real numbers.\n"
    example: []
    syntax:
      content: public static Vector NextVectorFloat(this Random r, int xMax = 1, int yMax = 1)
      parameters:
        - id: r
          type: System.Random
        - id: xMax
          type: System.Int32
        - id: yMax
          type: System.Int32
      return:
        type: DotFeather.Vector
      content.vb: >-
        <ExtensionAttribute>

        Public Shared Function NextVectorFloat(r As Random, xMax As Integer = 1, yMax As Integer = 1) As Vector
    overload: DotFeather.RandomExtension.NextVectorFloat*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.RandomExtension.NextColor*
    commentId: Overload:DotFeather.RandomExtension.NextColor
    name: NextColor
    nameWithType: RandomExtension.NextColor
    fullName: DotFeather.RandomExtension.NextColor
  - uid: System.Random
    commentId: T:System.Random
    parent: System
    isExternal: true
    name: Random
    nameWithType: Random
    fullName: System.Random
  - uid: System.Int32
    commentId: T:System.Int32
    parent: System
    isExternal: true
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - uid: System.Drawing.Color
    commentId: T:System.Drawing.Color
    parent: System.Drawing
    isExternal: true
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
  - uid: System.Drawing
    commentId: N:System.Drawing
    isExternal: true
    name: System.Drawing
    nameWithType: System.Drawing
    fullName: System.Drawing
  - uid: DotFeather.RandomExtension.NextVector*
    commentId: Overload:DotFeather.RandomExtension.NextVector
    name: NextVector
    nameWithType: RandomExtension.NextVector
    fullName: DotFeather.RandomExtension.NextVector
  - uid: DotFeather.Vector
    commentId: T:DotFeather.Vector
    parent: DotFeather
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - uid: DotFeather.RandomExtension.NextVectorInt*
    commentId: Overload:DotFeather.RandomExtension.NextVectorInt
    name: NextVectorInt
    nameWithType: RandomExtension.NextVectorInt
    fullName: DotFeather.RandomExtension.NextVectorInt
  - uid: DotFeather.VectorInt
    commentId: T:DotFeather.VectorInt
    parent: DotFeather
    name: VectorInt
    nameWithType: VectorInt
    fullName: DotFeather.VectorInt
  - uid: DotFeather.RandomExtension.NextVectorFloat*
    commentId: Overload:DotFeather.RandomExtension.NextVectorFloat
    name: NextVectorFloat
    nameWithType: RandomExtension.NextVectorFloat
    fullName: DotFeather.RandomExtension.NextVectorFloat
