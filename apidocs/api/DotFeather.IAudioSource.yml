### YamlMime:ManagedReference
items:
  - uid: DotFeather.IAudioSource
    commentId: T:DotFeather.IAudioSource
    id: IAudioSource
    parent: DotFeather
    children:
      - DotFeather.IAudioSource.Bits
      - DotFeather.IAudioSource.Channels
      - DotFeather.IAudioSource.EnumerateSamples(System.Nullable{System.Int32})
      - DotFeather.IAudioSource.SampleRate
      - DotFeather.IAudioSource.Samples
    langs:
      - csharp
      - vb
    name: IAudioSource
    nameWithType: IAudioSource
    fullName: DotFeather.IAudioSource
    type: Interface
    source:
      remote:
        path: DotFeather/Audio/IAudioSource.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: IAudioSource
      path: ../DotFeather/Audio/IAudioSource.cs
      startLine: 7
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nDefines the specifications of sound sources that can be handled by the DotFeather API.\n"
    example: []
    syntax:
      content: public interface IAudioSource
      content.vb: Public Interface IAudioSource
    modifiers.csharp:
      - public
      - interface
    modifiers.vb:
      - Public
      - Interface
  - uid: DotFeather.IAudioSource.EnumerateSamples(System.Nullable{System.Int32})
    commentId: M:DotFeather.IAudioSource.EnumerateSamples(System.Nullable{System.Int32})
    id: EnumerateSamples(System.Nullable{System.Int32})
    parent: DotFeather.IAudioSource
    langs:
      - csharp
      - vb
    name: EnumerateSamples(Nullable<Int32>)
    nameWithType: IAudioSource.EnumerateSamples(Nullable<Int32>)
    fullName: DotFeather.IAudioSource.EnumerateSamples(System.Nullable<System.Int32>)
    type: Method
    source:
      remote:
        path: DotFeather/Audio/IAudioSource.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: EnumerateSamples
      path: ../DotFeather/Audio/IAudioSource.cs
      startLine: 12
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nEnumerate samples.\n"
    example: []
    syntax:
      content: IEnumerable<(short left, short right)> EnumerateSamples(int? loopStart)
      parameters:
        - id: loopStart
          type: System.Nullable{System.Int32}
      return:
        type: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int16,System.Int16}}
      content.vb: Function EnumerateSamples(loopStart As Integer?) As IEnumerable(Of(left As Short, right As Short))
    overload: DotFeather.IAudioSource.EnumerateSamples*
    nameWithType.vb: IAudioSource.EnumerateSamples(Nullable(Of Int32))
    fullName.vb: DotFeather.IAudioSource.EnumerateSamples(System.Nullable(Of System.Int32))
    name.vb: EnumerateSamples(Nullable(Of Int32))
  - uid: DotFeather.IAudioSource.Samples
    commentId: P:DotFeather.IAudioSource.Samples
    id: Samples
    parent: DotFeather.IAudioSource
    langs:
      - csharp
      - vb
    name: Samples
    nameWithType: IAudioSource.Samples
    fullName: DotFeather.IAudioSource.Samples
    type: Property
    source:
      remote:
        path: DotFeather/Audio/IAudioSource.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Samples
      path: ../DotFeather/Audio/IAudioSource.cs
      startLine: 16
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet samples of this <xref href=\"DotFeather.IAudioSource\" data-throw-if-not-resolved=\"false\"></xref>. Return <code>null</code> if unspecified.\n"
    example: []
    syntax:
      content: int? Samples { get; }
      parameters: []
      return:
        type: System.Nullable{System.Int32}
      content.vb: ReadOnly Property Samples As Integer?
    overload: DotFeather.IAudioSource.Samples*
    modifiers.csharp:
      - get
    modifiers.vb:
      - ReadOnly
  - uid: DotFeather.IAudioSource.Channels
    commentId: P:DotFeather.IAudioSource.Channels
    id: Channels
    parent: DotFeather.IAudioSource
    langs:
      - csharp
      - vb
    name: Channels
    nameWithType: IAudioSource.Channels
    fullName: DotFeather.IAudioSource.Channels
    type: Property
    source:
      remote:
        path: DotFeather/Audio/IAudioSource.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Channels
      path: ../DotFeather/Audio/IAudioSource.cs
      startLine: 20
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the number of channels.\n"
    example: []
    syntax:
      content: int Channels { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: ReadOnly Property Channels As Integer
    overload: DotFeather.IAudioSource.Channels*
    modifiers.csharp:
      - get
    modifiers.vb:
      - ReadOnly
  - uid: DotFeather.IAudioSource.Bits
    commentId: P:DotFeather.IAudioSource.Bits
    id: Bits
    parent: DotFeather.IAudioSource
    langs:
      - csharp
      - vb
    name: Bits
    nameWithType: IAudioSource.Bits
    fullName: DotFeather.IAudioSource.Bits
    type: Property
    source:
      remote:
        path: DotFeather/Audio/IAudioSource.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Bits
      path: ../DotFeather/Audio/IAudioSource.cs
      startLine: 24
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the number of quantization bits.\n"
    example: []
    syntax:
      content: int Bits { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: ReadOnly Property Bits As Integer
    overload: DotFeather.IAudioSource.Bits*
    modifiers.csharp:
      - get
    modifiers.vb:
      - ReadOnly
  - uid: DotFeather.IAudioSource.SampleRate
    commentId: P:DotFeather.IAudioSource.SampleRate
    id: SampleRate
    parent: DotFeather.IAudioSource
    langs:
      - csharp
      - vb
    name: SampleRate
    nameWithType: IAudioSource.SampleRate
    fullName: DotFeather.IAudioSource.SampleRate
    type: Property
    source:
      remote:
        path: DotFeather/Audio/IAudioSource.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: SampleRate
      path: ../DotFeather/Audio/IAudioSource.cs
      startLine: 28
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the sampling frequency.\n"
    example: []
    syntax:
      content: int SampleRate { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: ReadOnly Property SampleRate As Integer
    overload: DotFeather.IAudioSource.SampleRate*
    modifiers.csharp:
      - get
    modifiers.vb:
      - ReadOnly
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: DotFeather.IAudioSource.EnumerateSamples*
    commentId: Overload:DotFeather.IAudioSource.EnumerateSamples
    name: EnumerateSamples
    nameWithType: IAudioSource.EnumerateSamples
    fullName: DotFeather.IAudioSource.EnumerateSamples
  - uid: System.Nullable{System.Int32}
    commentId: T:System.Nullable{System.Int32}
    parent: System
    definition: System.Nullable`1
    name: Nullable<Int32>
    nameWithType: Nullable<Int32>
    fullName: System.Nullable<System.Int32>
    nameWithType.vb: Nullable(Of Int32)
    fullName.vb: System.Nullable(Of System.Int32)
    name.vb: Nullable(Of Int32)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int16,System.Int16}}
    commentId: T:System.Collections.Generic.IEnumerable{System.ValueTuple{System.Int16,System.Int16}}
    parent: System.Collections.Generic
    definition: System.Collections.Generic.IEnumerable`1
    name: IEnumerable<ValueTuple<Int16, Int16>>
    nameWithType: IEnumerable<ValueTuple<Int16, Int16>>
    fullName: System.Collections.Generic.IEnumerable<System.ValueTuple<System.Int16, System.Int16>>
    nameWithType.vb: IEnumerable(Of ValueTuple(Of Int16, Int16))
    fullName.vb: System.Collections.Generic.IEnumerable(Of System.ValueTuple(Of System.Int16, System.Int16))
    name.vb: IEnumerable(Of ValueTuple(Of Int16, Int16))
    spec.csharp:
      - uid: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        fullName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        fullName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Int16
        name: Int16
        nameWithType: Int16
        fullName: System.Int16
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Int16
        name: Int16
        nameWithType: Int16
        fullName: System.Int16
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        fullName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        fullName: System.ValueTuple
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Int16
        name: Int16
        nameWithType: Int16
        fullName: System.Int16
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Int16
        name: Int16
        nameWithType: Int16
        fullName: System.Int16
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Nullable`1
    commentId: T:System.Nullable`1
    isExternal: true
    name: Nullable<T>
    nameWithType: Nullable<T>
    fullName: System.Nullable<T>
    nameWithType.vb: Nullable(Of T)
    fullName.vb: System.Nullable(Of T)
    name.vb: Nullable(Of T)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: System.Collections.Generic.IEnumerable`1
    commentId: T:System.Collections.Generic.IEnumerable`1
    isExternal: true
    name: IEnumerable<T>
    nameWithType: IEnumerable<T>
    fullName: System.Collections.Generic.IEnumerable<T>
    nameWithType.vb: IEnumerable(Of T)
    fullName.vb: System.Collections.Generic.IEnumerable(Of T)
    name.vb: IEnumerable(Of T)
    spec.csharp:
      - uid: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        fullName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        fullName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Collections.Generic
    commentId: N:System.Collections.Generic
    isExternal: true
    name: System.Collections.Generic
    nameWithType: System.Collections.Generic
    fullName: System.Collections.Generic
  - uid: DotFeather.IAudioSource
    commentId: T:DotFeather.IAudioSource
    parent: DotFeather
    name: IAudioSource
    nameWithType: IAudioSource
    fullName: DotFeather.IAudioSource
  - uid: DotFeather.IAudioSource.Samples*
    commentId: Overload:DotFeather.IAudioSource.Samples
    name: Samples
    nameWithType: IAudioSource.Samples
    fullName: DotFeather.IAudioSource.Samples
  - uid: DotFeather.IAudioSource.Channels*
    commentId: Overload:DotFeather.IAudioSource.Channels
    name: Channels
    nameWithType: IAudioSource.Channels
    fullName: DotFeather.IAudioSource.Channels
  - uid: System.Int32
    commentId: T:System.Int32
    parent: System
    isExternal: true
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - uid: DotFeather.IAudioSource.Bits*
    commentId: Overload:DotFeather.IAudioSource.Bits
    name: Bits
    nameWithType: IAudioSource.Bits
    fullName: DotFeather.IAudioSource.Bits
  - uid: DotFeather.IAudioSource.SampleRate*
    commentId: Overload:DotFeather.IAudioSource.SampleRate
    name: SampleRate
    nameWithType: IAudioSource.SampleRate
    fullName: DotFeather.IAudioSource.SampleRate
