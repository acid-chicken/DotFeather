### YamlMime:ManagedReference
items:
  - uid: DotFeather.Tilemap
    commentId: T:DotFeather.Tilemap
    id: Tilemap
    parent: DotFeather
    children:
      - DotFeather.Tilemap.#ctor(DotFeather.Vector)
      - DotFeather.Tilemap.AbsoluteLocation
      - DotFeather.Tilemap.Angle
      - DotFeather.Tilemap.Clear
      - DotFeather.Tilemap.CurrentDrawingPosition
      - DotFeather.Tilemap.DefaultColor
      - DotFeather.Tilemap.Destroy
      - DotFeather.Tilemap.DotFeather#IContainable#Parent
      - DotFeather.Tilemap.Draw(DotFeather.GameBase,DotFeather.Vector)
      - DotFeather.Tilemap.Fill(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
      - DotFeather.Tilemap.Fill(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
      - DotFeather.Tilemap.GetEnumerator
      - DotFeather.Tilemap.GetTileAt(DotFeather.Vector)
      - DotFeather.Tilemap.GetTileAt(System.Int32,System.Int32)
      - DotFeather.Tilemap.GetTileColorAt(DotFeather.Vector)
      - DotFeather.Tilemap.GetTileColorAt(System.Int32,System.Int32)
      - DotFeather.Tilemap.Item(DotFeather.Vector)
      - DotFeather.Tilemap.Item(System.Int32,System.Int32)
      - DotFeather.Tilemap.Line(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
      - DotFeather.Tilemap.Line(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
      - DotFeather.Tilemap.Location
      - DotFeather.Tilemap.Name
      - DotFeather.Tilemap.Parent
      - DotFeather.Tilemap.Scale
      - DotFeather.Tilemap.SetTile(DotFeather.Vector,DotFeather.ITile,System.Nullable{System.Drawing.Color})
      - DotFeather.Tilemap.SetTile(System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color})
      - DotFeather.Tilemap.TileSize
      - DotFeather.Tilemap.ZOrder
    langs:
      - csharp
      - vb
    name: Tilemap
    nameWithType: Tilemap
    fullName: DotFeather.Tilemap
    type: Class
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Tilemap
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 11
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nA <xref href=\"DotFeather.IDrawable\" data-throw-if-not-resolved=\"false\"></xref> object to render <xref href=\"DotFeather.ITile\" data-throw-if-not-resolved=\"false\"></xref> objects in a lattice.\n"
    example: []
    syntax:
      content: "public class Tilemap : IContainable, IDrawable"
      content.vb: >-
        Public Class Tilemap
            Implements IContainable, IDrawable
    inheritance:
      - System.Object
    implements:
      - DotFeather.IContainable
      - DotFeather.IDrawable
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - class
    modifiers.vb:
      - Public
      - Class
  - uid: DotFeather.Tilemap.ZOrder
    commentId: P:DotFeather.Tilemap.ZOrder
    id: ZOrder
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: ZOrder
    nameWithType: Tilemap.ZOrder
    fullName: DotFeather.Tilemap.ZOrder
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ZOrder
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 13
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public int ZOrder { get; set; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public Property ZOrder As Integer
    overload: DotFeather.Tilemap.ZOrder*
    implements:
      - DotFeather.IDrawable.ZOrder
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Name
    commentId: P:DotFeather.Tilemap.Name
    id: Name
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Name
    nameWithType: Tilemap.Name
    fullName: DotFeather.Tilemap.Name
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Name
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 15
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public string Name { get; set; }
      parameters: []
      return:
        type: System.String
      content.vb: Public Property Name As String
    overload: DotFeather.Tilemap.Name*
    implements:
      - DotFeather.IDrawable.Name
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Location
    commentId: P:DotFeather.Tilemap.Location
    id: Location
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Location
    nameWithType: Tilemap.Location
    fullName: DotFeather.Tilemap.Location
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Location
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 17
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public Vector Location { get; set; }
      parameters: []
      return:
        type: DotFeather.Vector
      content.vb: Public Property Location As Vector
    overload: DotFeather.Tilemap.Location*
    implements:
      - DotFeather.IDrawable.Location
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Angle
    commentId: P:DotFeather.Tilemap.Angle
    id: Angle
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Angle
    nameWithType: Tilemap.Angle
    fullName: DotFeather.Tilemap.Angle
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Angle
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 19
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public float Angle { get; set; }
      parameters: []
      return:
        type: System.Single
      content.vb: Public Property Angle As Single
    overload: DotFeather.Tilemap.Angle*
    implements:
      - DotFeather.IDrawable.Angle
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Scale
    commentId: P:DotFeather.Tilemap.Scale
    id: Scale
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Scale
    nameWithType: Tilemap.Scale
    fullName: DotFeather.Tilemap.Scale
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Scale
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 21
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public Vector Scale { get; set; }
      parameters: []
      return:
        type: DotFeather.Vector
      content.vb: Public Property Scale As Vector
    overload: DotFeather.Tilemap.Scale*
    implements:
      - DotFeather.IDrawable.Scale
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.DefaultColor
    commentId: P:DotFeather.Tilemap.DefaultColor
    id: DefaultColor
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: DefaultColor
    nameWithType: Tilemap.DefaultColor
    fullName: DotFeather.Tilemap.DefaultColor
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: DefaultColor
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 23
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public Color? DefaultColor { get; set; }
      parameters: []
      return:
        type: System.Nullable{System.Drawing.Color}
      content.vb: Public Property DefaultColor As Color?
    overload: DotFeather.Tilemap.DefaultColor*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.CurrentDrawingPosition
    commentId: P:DotFeather.Tilemap.CurrentDrawingPosition
    id: CurrentDrawingPosition
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: CurrentDrawingPosition
    nameWithType: Tilemap.CurrentDrawingPosition
    fullName: DotFeather.Tilemap.CurrentDrawingPosition
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: CurrentDrawingPosition
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 29
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet current drawing position. <code>null</code> when not in ITile.Draw()\n"
    example: []
    syntax:
      content: public VectorInt? CurrentDrawingPosition { get; }
      parameters: []
      return:
        type: System.Nullable{DotFeather.VectorInt}
        description: ""
      content.vb: Public ReadOnly Property CurrentDrawingPosition As VectorInt?
    overload: DotFeather.Tilemap.CurrentDrawingPosition*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Tilemap.Parent
    commentId: P:DotFeather.Tilemap.Parent
    id: Parent
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Parent
    nameWithType: Tilemap.Parent
    fullName: DotFeather.Tilemap.Parent
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Parent
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 34
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a parent of this drawable.\n"
    example: []
    syntax:
      content: public IContainable Parent { get; }
      parameters: []
      return:
        type: DotFeather.IContainable
      content.vb: Public ReadOnly Property Parent As IContainable
    overload: DotFeather.Tilemap.Parent*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Tilemap.DotFeather#IContainable#Parent
    commentId: P:DotFeather.Tilemap.DotFeather#IContainable#Parent
    id: DotFeather#IContainable#Parent
    isEii: true
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: IContainable.Parent
    nameWithType: Tilemap.IContainable.Parent
    fullName: DotFeather.Tilemap.DotFeather.IContainable.Parent
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: DotFeather.IContainable.Parent
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 36
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: IContainable IContainable.Parent { get; set; }
      parameters: []
      return:
        type: DotFeather.IContainable
      content.vb: ReadOnly WriteOnly Property DotFeather.IContainable.Parent As IContainable Implements IContainable.Parent
    overload: DotFeather.Tilemap.DotFeather#IContainable#Parent*
    implements:
      - DotFeather.IContainable.Parent
    nameWithType.vb: Tilemap.DotFeather.IContainable.Parent
    modifiers.csharp:
      - get
      - set
    name.vb: DotFeather.IContainable.Parent
  - uid: DotFeather.Tilemap.AbsoluteLocation
    commentId: P:DotFeather.Tilemap.AbsoluteLocation
    id: AbsoluteLocation
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: AbsoluteLocation
    nameWithType: Tilemap.AbsoluteLocation
    fullName: DotFeather.Tilemap.AbsoluteLocation
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: AbsoluteLocation
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 45
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet absolute location.\n"
    example: []
    syntax:
      content: public Vector AbsoluteLocation { get; }
      parameters: []
      return:
        type: DotFeather.Vector
      content.vb: Public ReadOnly Property AbsoluteLocation As Vector
    overload: DotFeather.Tilemap.AbsoluteLocation*
    implements:
      - DotFeather.IContainable.AbsoluteLocation
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Tilemap.TileSize
    commentId: P:DotFeather.Tilemap.TileSize
    id: TileSize
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: TileSize
    nameWithType: Tilemap.TileSize
    fullName: DotFeather.Tilemap.TileSize
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: TileSize
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 50
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set the size in pixels per tile.\n"
    example: []
    syntax:
      content: public Vector TileSize { get; set; }
      parameters: []
      return:
        type: DotFeather.Vector
      content.vb: Public Property TileSize As Vector
    overload: DotFeather.Tilemap.TileSize*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.#ctor(DotFeather.Vector)
    commentId: M:DotFeather.Tilemap.#ctor(DotFeather.Vector)
    id: "#ctor(DotFeather.Vector)"
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Tilemap(Vector)
    nameWithType: Tilemap.Tilemap(Vector)
    fullName: DotFeather.Tilemap.Tilemap(DotFeather.Vector)
    type: Constructor
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: .ctor
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 56
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nInitialize a new instance of <xref href=\"DotFeather.Tilemap\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
    example: []
    syntax:
      content: public Tilemap(Vector tileSize)
      parameters:
        - id: tileSize
          type: DotFeather.Vector
          description: Size per the tile.
      content.vb: Public Sub New(tileSize As Vector)
    overload: DotFeather.Tilemap.#ctor*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Item(System.Int32,System.Int32)
    commentId: P:DotFeather.Tilemap.Item(System.Int32,System.Int32)
    id: Item(System.Int32,System.Int32)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Item[Int32, Int32]
    nameWithType: Tilemap.Item[Int32, Int32]
    fullName: DotFeather.Tilemap.Item[System.Int32, System.Int32]
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: this[]
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 65
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set the tile at the specified position.\n"
    example: []
    syntax:
      content: public ITile this[int x, int y] { get; set; }
      parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
      return:
        type: DotFeather.ITile
      content.vb: Public Property Item(x As Integer, y As Integer) As ITile
    overload: DotFeather.Tilemap.Item*
    nameWithType.vb: Tilemap.Item(Int32, Int32)
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Tilemap.Item(System.Int32, System.Int32)
    name.vb: Item(Int32, Int32)
  - uid: DotFeather.Tilemap.Item(DotFeather.Vector)
    commentId: P:DotFeather.Tilemap.Item(DotFeather.Vector)
    id: Item(DotFeather.Vector)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Item[Vector]
    nameWithType: Tilemap.Item[Vector]
    fullName: DotFeather.Tilemap.Item[DotFeather.Vector]
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: this[]
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 74
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set the tile at the specified position.\n"
    example: []
    syntax:
      content: public ITile this[Vector point] { get; set; }
      parameters:
        - id: point
          type: DotFeather.Vector
      return:
        type: DotFeather.ITile
      content.vb: Public Property Item(point As Vector) As ITile
    overload: DotFeather.Tilemap.Item*
    nameWithType.vb: Tilemap.Item(Vector)
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Tilemap.Item(DotFeather.Vector)
    name.vb: Item(Vector)
  - uid: DotFeather.Tilemap.Draw(DotFeather.GameBase,DotFeather.Vector)
    commentId: M:DotFeather.Tilemap.Draw(DotFeather.GameBase,DotFeather.Vector)
    id: Draw(DotFeather.GameBase,DotFeather.Vector)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Draw(GameBase, Vector)
    nameWithType: Tilemap.Draw(GameBase, Vector)
    fullName: DotFeather.Tilemap.Draw(DotFeather.GameBase, DotFeather.Vector)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Draw
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 80
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public void Draw(GameBase game, Vector location)
      parameters:
        - id: game
          type: DotFeather.GameBase
        - id: location
          type: DotFeather.Vector
      content.vb: Public Sub Draw(game As GameBase, location As Vector)
    overload: DotFeather.Tilemap.Draw*
    implements:
      - DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.GetTileAt(DotFeather.Vector)
    commentId: M:DotFeather.Tilemap.GetTileAt(DotFeather.Vector)
    id: GetTileAt(DotFeather.Vector)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: GetTileAt(Vector)
    nameWithType: Tilemap.GetTileAt(Vector)
    fullName: DotFeather.Tilemap.GetTileAt(DotFeather.Vector)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GetTileAt
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 105
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the tile at the specified position.\n"
    example: []
    syntax:
      content: public ITile GetTileAt(Vector point)
      parameters:
        - id: point
          type: DotFeather.Vector
      return:
        type: DotFeather.ITile
      content.vb: Public Function GetTileAt(point As Vector) As ITile
    overload: DotFeather.Tilemap.GetTileAt*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.GetTileAt(System.Int32,System.Int32)
    commentId: M:DotFeather.Tilemap.GetTileAt(System.Int32,System.Int32)
    id: GetTileAt(System.Int32,System.Int32)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: GetTileAt(Int32, Int32)
    nameWithType: Tilemap.GetTileAt(Int32, Int32)
    fullName: DotFeather.Tilemap.GetTileAt(System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GetTileAt
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 109
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the tile at the specified position.\n"
    example: []
    syntax:
      content: public ITile GetTileAt(int x, int y)
      parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
      return:
        type: DotFeather.ITile
      content.vb: Public Function GetTileAt(x As Integer, y As Integer) As ITile
    overload: DotFeather.Tilemap.GetTileAt*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.GetTileColorAt(DotFeather.Vector)
    commentId: M:DotFeather.Tilemap.GetTileColorAt(DotFeather.Vector)
    id: GetTileColorAt(DotFeather.Vector)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: GetTileColorAt(Vector)
    nameWithType: Tilemap.GetTileColorAt(Vector)
    fullName: DotFeather.Tilemap.GetTileColorAt(DotFeather.Vector)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GetTileColorAt
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 114
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet color of the tile at the specified position.\n"
    example: []
    syntax:
      content: public Color? GetTileColorAt(Vector point)
      parameters:
        - id: point
          type: DotFeather.Vector
      return:
        type: System.Nullable{System.Drawing.Color}
      content.vb: Public Function GetTileColorAt(point As Vector) As Color?
    overload: DotFeather.Tilemap.GetTileColorAt*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.GetTileColorAt(System.Int32,System.Int32)
    commentId: M:DotFeather.Tilemap.GetTileColorAt(System.Int32,System.Int32)
    id: GetTileColorAt(System.Int32,System.Int32)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: GetTileColorAt(Int32, Int32)
    nameWithType: Tilemap.GetTileColorAt(Int32, Int32)
    fullName: DotFeather.Tilemap.GetTileColorAt(System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GetTileColorAt
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 118
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet color of the tile at the specified position.\n"
    example: []
    syntax:
      content: public Color? GetTileColorAt(int x, int y)
      parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
      return:
        type: System.Nullable{System.Drawing.Color}
      content.vb: Public Function GetTileColorAt(x As Integer, y As Integer) As Color?
    overload: DotFeather.Tilemap.GetTileColorAt*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.SetTile(DotFeather.Vector,DotFeather.ITile,System.Nullable{System.Drawing.Color})
    commentId: M:DotFeather.Tilemap.SetTile(DotFeather.Vector,DotFeather.ITile,System.Nullable{System.Drawing.Color})
    id: SetTile(DotFeather.Vector,DotFeather.ITile,System.Nullable{System.Drawing.Color})
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: SetTile(Vector, ITile, Nullable<Color>)
    nameWithType: Tilemap.SetTile(Vector, ITile, Nullable<Color>)
    fullName: DotFeather.Tilemap.SetTile(DotFeather.Vector, DotFeather.ITile, System.Nullable<System.Drawing.Color>)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: SetTile
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 123
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nSet the tile at the specified position.\n"
    example: []
    syntax:
      content: public void SetTile(Vector point, ITile tile, Color? color = default(Color? ))
      parameters:
        - id: point
          type: DotFeather.Vector
        - id: tile
          type: DotFeather.ITile
        - id: color
          type: System.Nullable{System.Drawing.Color}
      content.vb: Public Sub SetTile(point As Vector, tile As ITile, color As Color? = Nothing)
    overload: DotFeather.Tilemap.SetTile*
    nameWithType.vb: Tilemap.SetTile(Vector, ITile, Nullable(Of Color))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Tilemap.SetTile(DotFeather.Vector, DotFeather.ITile, System.Nullable(Of System.Drawing.Color))
    name.vb: SetTile(Vector, ITile, Nullable(Of Color))
  - uid: DotFeather.Tilemap.SetTile(System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color})
    commentId: M:DotFeather.Tilemap.SetTile(System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color})
    id: SetTile(System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color})
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: SetTile(Int32, Int32, ITile, Nullable<Color>)
    nameWithType: Tilemap.SetTile(Int32, Int32, ITile, Nullable<Color>)
    fullName: DotFeather.Tilemap.SetTile(System.Int32, System.Int32, DotFeather.ITile, System.Nullable<System.Drawing.Color>)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: SetTile
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 128
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nSet the tile at the specified position.\n"
    example: []
    syntax:
      content: public void SetTile(int x, int y, ITile tile, Color? color = default(Color? ))
      parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
        - id: tile
          type: DotFeather.ITile
        - id: color
          type: System.Nullable{System.Drawing.Color}
      content.vb: Public Sub SetTile(x As Integer, y As Integer, tile As ITile, color As Color? = Nothing)
    overload: DotFeather.Tilemap.SetTile*
    nameWithType.vb: Tilemap.SetTile(Int32, Int32, ITile, Nullable(Of Color))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Tilemap.SetTile(System.Int32, System.Int32, DotFeather.ITile, System.Nullable(Of System.Drawing.Color))
    name.vb: SetTile(Int32, Int32, ITile, Nullable(Of Color))
  - uid: DotFeather.Tilemap.Clear
    commentId: M:DotFeather.Tilemap.Clear
    id: Clear
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Clear()
    nameWithType: Tilemap.Clear()
    fullName: DotFeather.Tilemap.Clear()
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Clear
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 139
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nRemove all tiles.\n"
    example: []
    syntax:
      content: public void Clear()
      content.vb: Public Sub Clear
    overload: DotFeather.Tilemap.Clear*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Line(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
    commentId: M:DotFeather.Tilemap.Line(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
    id: Line(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Line(Int32, Int32, Int32, Int32, ITile)
    nameWithType: Tilemap.Line(Int32, Int32, Int32, Int32, ITile)
    fullName: DotFeather.Tilemap.Line(System.Int32, System.Int32, System.Int32, System.Int32, DotFeather.ITile)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Line
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 147
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nDraw a line with specified tile.\n"
    example: []
    syntax:
      content: public void Line(int x1, int y1, int x2, int y2, ITile tile)
      parameters:
        - id: x1
          type: System.Int32
        - id: y1
          type: System.Int32
        - id: x2
          type: System.Int32
        - id: y2
          type: System.Int32
        - id: tile
          type: DotFeather.ITile
      content.vb: Public Sub Line(x1 As Integer, y1 As Integer, x2 As Integer, y2 As Integer, tile As ITile)
    overload: DotFeather.Tilemap.Line*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Fill(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
    commentId: M:DotFeather.Tilemap.Fill(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
    id: Fill(System.Int32,System.Int32,System.Int32,System.Int32,DotFeather.ITile)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Fill(Int32, Int32, Int32, Int32, ITile)
    nameWithType: Tilemap.Fill(Int32, Int32, Int32, Int32, ITile)
    fullName: DotFeather.Tilemap.Fill(System.Int32, System.Int32, System.Int32, System.Int32, DotFeather.ITile)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Fill
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 191
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nFill the specified rectangle with the specified tile.\n"
    example: []
    syntax:
      content: public void Fill(int x1, int y1, int width, int height, ITile tile)
      parameters:
        - id: x1
          type: System.Int32
        - id: y1
          type: System.Int32
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
        - id: tile
          type: DotFeather.ITile
      content.vb: Public Sub Fill(x1 As Integer, y1 As Integer, width As Integer, height As Integer, tile As ITile)
    overload: DotFeather.Tilemap.Fill*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Line(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
    commentId: M:DotFeather.Tilemap.Line(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
    id: Line(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Line(Vector, Vector, ITile)
    nameWithType: Tilemap.Line(Vector, Vector, ITile)
    fullName: DotFeather.Tilemap.Line(DotFeather.Vector, DotFeather.Vector, DotFeather.ITile)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Line
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 201
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nDraw a line with specified tile.\n"
    example: []
    syntax:
      content: public void Line(Vector start, Vector end, ITile tile)
      parameters:
        - id: start
          type: DotFeather.Vector
        - id: end
          type: DotFeather.Vector
        - id: tile
          type: DotFeather.ITile
      content.vb: Public Sub Line(start As Vector, end As Vector, tile As ITile)
    overload: DotFeather.Tilemap.Line*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Fill(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
    commentId: M:DotFeather.Tilemap.Fill(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
    id: Fill(DotFeather.Vector,DotFeather.Vector,DotFeather.ITile)
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Fill(Vector, Vector, ITile)
    nameWithType: Tilemap.Fill(Vector, Vector, ITile)
    fullName: DotFeather.Tilemap.Fill(DotFeather.Vector, DotFeather.Vector, DotFeather.ITile)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Fill
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 207
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nFill the specified rectangle with the specified tile.\n"
    example: []
    syntax:
      content: public void Fill(Vector position, Vector size, ITile tile)
      parameters:
        - id: position
          type: DotFeather.Vector
        - id: size
          type: DotFeather.Vector
        - id: tile
          type: DotFeather.ITile
      content.vb: Public Sub Fill(position As Vector, size As Vector, tile As ITile)
    overload: DotFeather.Tilemap.Fill*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Tilemap.Destroy
    commentId: M:DotFeather.Tilemap.Destroy
    id: Destroy
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: Destroy()
    nameWithType: Tilemap.Destroy()
    fullName: DotFeather.Tilemap.Destroy()
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Destroy
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 213
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nDestroy this <xref href=\"DotFeather.Tilemap\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    example: []
    syntax:
      content: public virtual void Destroy()
      content.vb: Public Overridable Sub Destroy
    overload: DotFeather.Tilemap.Destroy*
    implements:
      - DotFeather.IDrawable.Destroy
    modifiers.csharp:
      - public
      - virtual
    modifiers.vb:
      - Public
      - Overridable
  - uid: DotFeather.Tilemap.GetEnumerator
    commentId: M:DotFeather.Tilemap.GetEnumerator
    id: GetEnumerator
    parent: DotFeather.Tilemap
    langs:
      - csharp
      - vb
    name: GetEnumerator()
    nameWithType: Tilemap.GetEnumerator()
    fullName: DotFeather.Tilemap.GetEnumerator()
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Tilemap.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GetEnumerator
      path: ../DotFeather/Graphics/Tilemap.cs
      startLine: 222
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public IEnumerator<(int x, int y, ITile tile, Color? color)> GetEnumerator()
      return:
        type: System.Collections.Generic.IEnumerator{System.ValueTuple{System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color}}}
      content.vb: Public Function GetEnumerator As IEnumerator(Of(x As Integer, y As Integer, tile As ITile, color As Color?))
    overload: DotFeather.Tilemap.GetEnumerator*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
references:
  - uid: DotFeather.IDrawable
    commentId: T:DotFeather.IDrawable
    parent: DotFeather
    name: IDrawable
    nameWithType: IDrawable
    fullName: DotFeather.IDrawable
  - uid: DotFeather.ITile
    commentId: T:DotFeather.ITile
    parent: DotFeather
    name: ITile
    nameWithType: ITile
    fullName: DotFeather.ITile
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: DotFeather.IContainable
    commentId: T:DotFeather.IContainable
    parent: DotFeather
    name: IContainable
    nameWithType: IContainable
    fullName: DotFeather.IContainable
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.Tilemap.ZOrder*
    commentId: Overload:DotFeather.Tilemap.ZOrder
    name: ZOrder
    nameWithType: Tilemap.ZOrder
    fullName: DotFeather.Tilemap.ZOrder
  - uid: DotFeather.IDrawable.ZOrder
    commentId: P:DotFeather.IDrawable.ZOrder
    parent: DotFeather.IDrawable
    name: ZOrder
    nameWithType: IDrawable.ZOrder
    fullName: DotFeather.IDrawable.ZOrder
  - uid: System.Int32
    commentId: T:System.Int32
    parent: System
    isExternal: true
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - uid: DotFeather.Tilemap.Name*
    commentId: Overload:DotFeather.Tilemap.Name
    name: Name
    nameWithType: Tilemap.Name
    fullName: DotFeather.Tilemap.Name
  - uid: DotFeather.IDrawable.Name
    commentId: P:DotFeather.IDrawable.Name
    parent: DotFeather.IDrawable
    name: Name
    nameWithType: IDrawable.Name
    fullName: DotFeather.IDrawable.Name
  - uid: System.String
    commentId: T:System.String
    parent: System
    isExternal: true
    name: String
    nameWithType: String
    fullName: System.String
  - uid: DotFeather.Tilemap.Location*
    commentId: Overload:DotFeather.Tilemap.Location
    name: Location
    nameWithType: Tilemap.Location
    fullName: DotFeather.Tilemap.Location
  - uid: DotFeather.IDrawable.Location
    commentId: P:DotFeather.IDrawable.Location
    parent: DotFeather.IDrawable
    name: Location
    nameWithType: IDrawable.Location
    fullName: DotFeather.IDrawable.Location
  - uid: DotFeather.Vector
    commentId: T:DotFeather.Vector
    parent: DotFeather
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - uid: DotFeather.Tilemap.Angle*
    commentId: Overload:DotFeather.Tilemap.Angle
    name: Angle
    nameWithType: Tilemap.Angle
    fullName: DotFeather.Tilemap.Angle
  - uid: DotFeather.IDrawable.Angle
    commentId: P:DotFeather.IDrawable.Angle
    parent: DotFeather.IDrawable
    name: Angle
    nameWithType: IDrawable.Angle
    fullName: DotFeather.IDrawable.Angle
  - uid: System.Single
    commentId: T:System.Single
    parent: System
    isExternal: true
    name: Single
    nameWithType: Single
    fullName: System.Single
  - uid: DotFeather.Tilemap.Scale*
    commentId: Overload:DotFeather.Tilemap.Scale
    name: Scale
    nameWithType: Tilemap.Scale
    fullName: DotFeather.Tilemap.Scale
  - uid: DotFeather.IDrawable.Scale
    commentId: P:DotFeather.IDrawable.Scale
    parent: DotFeather.IDrawable
    name: Scale
    nameWithType: IDrawable.Scale
    fullName: DotFeather.IDrawable.Scale
  - uid: DotFeather.Tilemap.DefaultColor*
    commentId: Overload:DotFeather.Tilemap.DefaultColor
    name: DefaultColor
    nameWithType: Tilemap.DefaultColor
    fullName: DotFeather.Tilemap.DefaultColor
  - uid: System.Nullable{System.Drawing.Color}
    commentId: T:System.Nullable{System.Drawing.Color}
    parent: System
    definition: System.Nullable`1
    name: Nullable<Color>
    nameWithType: Nullable<Color>
    fullName: System.Nullable<System.Drawing.Color>
    nameWithType.vb: Nullable(Of Color)
    fullName.vb: System.Nullable(Of System.Drawing.Color)
    name.vb: Nullable(Of Color)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Drawing.Color
        name: Color
        nameWithType: Color
        fullName: System.Drawing.Color
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Drawing.Color
        name: Color
        nameWithType: Color
        fullName: System.Drawing.Color
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Nullable`1
    commentId: T:System.Nullable`1
    isExternal: true
    name: Nullable<T>
    nameWithType: Nullable<T>
    fullName: System.Nullable<T>
    nameWithType.vb: Nullable(Of T)
    fullName.vb: System.Nullable(Of T)
    name.vb: Nullable(Of T)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Tilemap.CurrentDrawingPosition*
    commentId: Overload:DotFeather.Tilemap.CurrentDrawingPosition
    name: CurrentDrawingPosition
    nameWithType: Tilemap.CurrentDrawingPosition
    fullName: DotFeather.Tilemap.CurrentDrawingPosition
  - uid: System.Nullable{DotFeather.VectorInt}
    commentId: T:System.Nullable{DotFeather.VectorInt}
    parent: System
    definition: System.Nullable`1
    name: Nullable<VectorInt>
    nameWithType: Nullable<VectorInt>
    fullName: System.Nullable<DotFeather.VectorInt>
    nameWithType.vb: Nullable(Of VectorInt)
    fullName.vb: System.Nullable(Of DotFeather.VectorInt)
    name.vb: Nullable(Of VectorInt)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: DotFeather.VectorInt
        name: VectorInt
        nameWithType: VectorInt
        fullName: DotFeather.VectorInt
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: DotFeather.VectorInt
        name: VectorInt
        nameWithType: VectorInt
        fullName: DotFeather.VectorInt
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Tilemap.Parent*
    commentId: Overload:DotFeather.Tilemap.Parent
    name: Parent
    nameWithType: Tilemap.Parent
    fullName: DotFeather.Tilemap.Parent
  - uid: DotFeather.Tilemap.DotFeather#IContainable#Parent*
    commentId: Overload:DotFeather.Tilemap.DotFeather#IContainable#Parent
    name: IContainable.Parent
    nameWithType: Tilemap.IContainable.Parent
    fullName: DotFeather.Tilemap.DotFeather.IContainable.Parent
    nameWithType.vb: Tilemap.DotFeather.IContainable.Parent
    name.vb: DotFeather.IContainable.Parent
  - uid: DotFeather.IContainable.Parent
    commentId: P:DotFeather.IContainable.Parent
    parent: DotFeather.IContainable
    name: Parent
    nameWithType: IContainable.Parent
    fullName: DotFeather.IContainable.Parent
  - uid: DotFeather.Tilemap.AbsoluteLocation*
    commentId: Overload:DotFeather.Tilemap.AbsoluteLocation
    name: AbsoluteLocation
    nameWithType: Tilemap.AbsoluteLocation
    fullName: DotFeather.Tilemap.AbsoluteLocation
  - uid: DotFeather.IContainable.AbsoluteLocation
    commentId: P:DotFeather.IContainable.AbsoluteLocation
    parent: DotFeather.IContainable
    name: AbsoluteLocation
    nameWithType: IContainable.AbsoluteLocation
    fullName: DotFeather.IContainable.AbsoluteLocation
  - uid: DotFeather.Tilemap.TileSize*
    commentId: Overload:DotFeather.Tilemap.TileSize
    name: TileSize
    nameWithType: Tilemap.TileSize
    fullName: DotFeather.Tilemap.TileSize
  - uid: DotFeather.Tilemap
    commentId: T:DotFeather.Tilemap
    parent: DotFeather
    name: Tilemap
    nameWithType: Tilemap
    fullName: DotFeather.Tilemap
  - uid: DotFeather.Tilemap.#ctor*
    commentId: Overload:DotFeather.Tilemap.#ctor
    name: Tilemap
    nameWithType: Tilemap.Tilemap
    fullName: DotFeather.Tilemap.Tilemap
  - uid: DotFeather.Tilemap.Item*
    commentId: Overload:DotFeather.Tilemap.Item
    name: Item
    nameWithType: Tilemap.Item
    fullName: DotFeather.Tilemap.Item
  - uid: DotFeather.Tilemap.Draw*
    commentId: Overload:DotFeather.Tilemap.Draw
    name: Draw
    nameWithType: Tilemap.Draw
    fullName: DotFeather.Tilemap.Draw
  - uid: DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
    commentId: M:DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
    parent: DotFeather.IDrawable
    name: Draw(GameBase, Vector)
    nameWithType: IDrawable.Draw(GameBase, Vector)
    fullName: DotFeather.IDrawable.Draw(DotFeather.GameBase, DotFeather.Vector)
    spec.csharp:
      - uid: DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
        name: Draw
        nameWithType: IDrawable.Draw
        fullName: DotFeather.IDrawable.Draw
      - name: (
        nameWithType: (
        fullName: (
      - uid: DotFeather.GameBase
        name: GameBase
        nameWithType: GameBase
        fullName: DotFeather.GameBase
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: DotFeather.Vector
        name: Vector
        nameWithType: Vector
        fullName: DotFeather.Vector
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: DotFeather.IDrawable.Draw(DotFeather.GameBase,DotFeather.Vector)
        name: Draw
        nameWithType: IDrawable.Draw
        fullName: DotFeather.IDrawable.Draw
      - name: (
        nameWithType: (
        fullName: (
      - uid: DotFeather.GameBase
        name: GameBase
        nameWithType: GameBase
        fullName: DotFeather.GameBase
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: DotFeather.Vector
        name: Vector
        nameWithType: Vector
        fullName: DotFeather.Vector
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.GameBase
    commentId: T:DotFeather.GameBase
    parent: DotFeather
    name: GameBase
    nameWithType: GameBase
    fullName: DotFeather.GameBase
  - uid: DotFeather.Tilemap.GetTileAt*
    commentId: Overload:DotFeather.Tilemap.GetTileAt
    name: GetTileAt
    nameWithType: Tilemap.GetTileAt
    fullName: DotFeather.Tilemap.GetTileAt
  - uid: DotFeather.Tilemap.GetTileColorAt*
    commentId: Overload:DotFeather.Tilemap.GetTileColorAt
    name: GetTileColorAt
    nameWithType: Tilemap.GetTileColorAt
    fullName: DotFeather.Tilemap.GetTileColorAt
  - uid: DotFeather.Tilemap.SetTile*
    commentId: Overload:DotFeather.Tilemap.SetTile
    name: SetTile
    nameWithType: Tilemap.SetTile
    fullName: DotFeather.Tilemap.SetTile
  - uid: DotFeather.Tilemap.Clear*
    commentId: Overload:DotFeather.Tilemap.Clear
    name: Clear
    nameWithType: Tilemap.Clear
    fullName: DotFeather.Tilemap.Clear
  - uid: DotFeather.Tilemap.Line*
    commentId: Overload:DotFeather.Tilemap.Line
    name: Line
    nameWithType: Tilemap.Line
    fullName: DotFeather.Tilemap.Line
  - uid: DotFeather.Tilemap.Fill*
    commentId: Overload:DotFeather.Tilemap.Fill
    name: Fill
    nameWithType: Tilemap.Fill
    fullName: DotFeather.Tilemap.Fill
  - uid: DotFeather.Tilemap.Destroy*
    commentId: Overload:DotFeather.Tilemap.Destroy
    name: Destroy
    nameWithType: Tilemap.Destroy
    fullName: DotFeather.Tilemap.Destroy
  - uid: DotFeather.IDrawable.Destroy
    commentId: M:DotFeather.IDrawable.Destroy
    parent: DotFeather.IDrawable
    name: Destroy()
    nameWithType: IDrawable.Destroy()
    fullName: DotFeather.IDrawable.Destroy()
    spec.csharp:
      - uid: DotFeather.IDrawable.Destroy
        name: Destroy
        nameWithType: IDrawable.Destroy
        fullName: DotFeather.IDrawable.Destroy
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: DotFeather.IDrawable.Destroy
        name: Destroy
        nameWithType: IDrawable.Destroy
        fullName: DotFeather.IDrawable.Destroy
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Tilemap.GetEnumerator*
    commentId: Overload:DotFeather.Tilemap.GetEnumerator
    name: GetEnumerator
    nameWithType: Tilemap.GetEnumerator
    fullName: DotFeather.Tilemap.GetEnumerator
  - uid: System.Collections.Generic.IEnumerator{System.ValueTuple{System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color}}}
    commentId: T:System.Collections.Generic.IEnumerator{System.ValueTuple{System.Int32,System.Int32,DotFeather.ITile,System.Nullable{System.Drawing.Color}}}
    parent: System.Collections.Generic
    definition: System.Collections.Generic.IEnumerator`1
    name: IEnumerator<ValueTuple<Int32, Int32, ITile, Nullable<Color>>>
    nameWithType: IEnumerator<ValueTuple<Int32, Int32, ITile, Nullable<Color>>>
    fullName: System.Collections.Generic.IEnumerator<System.ValueTuple<System.Int32, System.Int32, DotFeather.ITile, System.Nullable<System.Drawing.Color>>>
    nameWithType.vb: IEnumerator(Of ValueTuple(Of Int32, Int32, ITile, Nullable(Of Color)))
    fullName.vb: System.Collections.Generic.IEnumerator(Of System.ValueTuple(Of System.Int32, System.Int32, DotFeather.ITile, System.Nullable(Of System.Drawing.Color)))
    name.vb: IEnumerator(Of ValueTuple(Of Int32, Int32, ITile, Nullable(Of Color)))
    spec.csharp:
      - uid: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        fullName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.ValueTuple`4
        name: ValueTuple
        nameWithType: ValueTuple
        fullName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: DotFeather.ITile
        name: ITile
        nameWithType: ITile
        fullName: DotFeather.ITile
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Drawing.Color
        name: Color
        nameWithType: Color
        fullName: System.Drawing.Color
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
      - name: ">"
        nameWithType: ">"
        fullName: ">"
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        fullName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.ValueTuple`4
        name: ValueTuple
        nameWithType: ValueTuple
        fullName: System.ValueTuple
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: DotFeather.ITile
        name: ITile
        nameWithType: ITile
        fullName: DotFeather.ITile
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Drawing.Color
        name: Color
        nameWithType: Color
        fullName: System.Drawing.Color
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
      - name: )
        nameWithType: )
        fullName: )
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
    isExternal: true
    name: IEnumerator<T>
    nameWithType: IEnumerator<T>
    fullName: System.Collections.Generic.IEnumerator<T>
    nameWithType.vb: IEnumerator(Of T)
    fullName.vb: System.Collections.Generic.IEnumerator(Of T)
    name.vb: IEnumerator(Of T)
    spec.csharp:
      - uid: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        fullName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Collections.Generic.IEnumerator`1
        name: IEnumerator
        nameWithType: IEnumerator
        fullName: System.Collections.Generic.IEnumerator
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Collections.Generic
    commentId: N:System.Collections.Generic
    isExternal: true
    name: System.Collections.Generic
    nameWithType: System.Collections.Generic
    fullName: System.Collections.Generic
