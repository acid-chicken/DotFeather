### YamlMime:ManagedReference
items:
  - uid: DotFeather.Texture2D
    commentId: T:DotFeather.Texture2D
    id: Texture2D
    parent: DotFeather
    children:
      - DotFeather.Texture2D.#ctor(System.Int32,DotFeather.VectorInt)
      - DotFeather.Texture2D.Create(System.Byte[],System.Int32,System.Int32)
      - DotFeather.Texture2D.Create(System.Byte[0:,0:,0:])
      - DotFeather.Texture2D.CreateSolid(System.Drawing.Color,DotFeather.VectorInt)
      - DotFeather.Texture2D.CreateSolid(System.Drawing.Color,System.Int32,System.Int32)
      - DotFeather.Texture2D.Dispose
      - DotFeather.Texture2D.Handle
      - DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,DotFeather.VectorInt)
      - DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)
      - DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,DotFeather.VectorInt)
      - DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
      - DotFeather.Texture2D.LoadFrom(Image)
      - DotFeather.Texture2D.LoadFrom(System.IO.Stream)
      - DotFeather.Texture2D.LoadFrom(System.String)
      - DotFeather.Texture2D.Size
    langs:
      - csharp
      - vb
    name: Texture2D
    nameWithType: Texture2D
    fullName: DotFeather.Texture2D
    type: Struct
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Texture2D
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 18
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nWrap a handle of 2D texture.\n"
    example: []
    syntax:
      content: "public struct Texture2D : IDisposable"
      content.vb: >-
        Public Structure Texture2D
            Implements IDisposable
    implements:
      - System.IDisposable
    inheritedMembers:
      - System.ValueType.Equals(System.Object)
      - System.ValueType.GetHashCode
      - System.ValueType.ToString
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetType
      - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers.csharp:
      - public
      - struct
    modifiers.vb:
      - Public
      - Structure
  - uid: DotFeather.Texture2D.Handle
    commentId: P:DotFeather.Texture2D.Handle
    id: Handle
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: Handle
    nameWithType: Texture2D.Handle
    fullName: DotFeather.Texture2D.Handle
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Handle
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 23
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a OpenGL handle of this texture.\n"
    example: []
    syntax:
      content: public int Handle { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public ReadOnly Property Handle As Integer
    overload: DotFeather.Texture2D.Handle*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Texture2D.Size
    commentId: P:DotFeather.Texture2D.Size
    id: Size
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: Size
    nameWithType: Texture2D.Size
    fullName: DotFeather.Texture2D.Size
    type: Property
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Size
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 28
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet size of this texture.\n"
    example: []
    syntax:
      content: public VectorInt Size { get; }
      parameters: []
      return:
        type: DotFeather.VectorInt
      content.vb: Public ReadOnly Property Size As VectorInt
    overload: DotFeather.Texture2D.Size*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Texture2D.#ctor(System.Int32,DotFeather.VectorInt)
    commentId: M:DotFeather.Texture2D.#ctor(System.Int32,DotFeather.VectorInt)
    id: "#ctor(System.Int32,DotFeather.VectorInt)"
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: Texture2D(Int32, VectorInt)
    nameWithType: Texture2D.Texture2D(Int32, VectorInt)
    fullName: DotFeather.Texture2D.Texture2D(System.Int32, DotFeather.VectorInt)
    type: Constructor
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: .ctor
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 35
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nInitialize a new instance of  <xref href=\"DotFeather.Texture2D\" data-throw-if-not-resolved=\"false\"></xref> with the specified handle and size.\n"
    example: []
    syntax:
      content: public Texture2D(int handle, VectorInt size)
      parameters:
        - id: handle
          type: System.Int32
          description: ""
        - id: size
          type: DotFeather.VectorInt
          description: ""
      content.vb: Public Sub New(handle As Integer, size As VectorInt)
    overload: DotFeather.Texture2D.#ctor*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.Texture2D.LoadFrom(System.String)
    commentId: M:DotFeather.Texture2D.LoadFrom(System.String)
    id: LoadFrom(System.String)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadFrom(String)
    nameWithType: Texture2D.LoadFrom(String)
    fullName: DotFeather.Texture2D.LoadFrom(System.String)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 46
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nLoad an image file as a texture.\n"
    example: []
    syntax:
      content: public static Texture2D LoadFrom(string path)
      parameters:
        - id: path
          type: System.String
          description: File path.
      return:
        type: DotFeather.Texture2D
        description: Loaded texture
      content.vb: Public Shared Function LoadFrom(path As String) As Texture2D
    overload: DotFeather.Texture2D.LoadFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.LoadFrom(System.IO.Stream)
    commentId: M:DotFeather.Texture2D.LoadFrom(System.IO.Stream)
    id: LoadFrom(System.IO.Stream)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadFrom(Stream)
    nameWithType: Texture2D.LoadFrom(Stream)
    fullName: DotFeather.Texture2D.LoadFrom(System.IO.Stream)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 56
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nLoad an image file as a texture.\n"
    example: []
    syntax:
      content: public static Texture2D LoadFrom(Stream stream)
      parameters:
        - id: stream
          type: System.IO.Stream
          description: File stream.
      return:
        type: DotFeather.Texture2D
        description: Loaded texture
      content.vb: Public Shared Function LoadFrom(stream As Stream) As Texture2D
    overload: DotFeather.Texture2D.LoadFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.LoadFrom(Image)
    commentId: M:DotFeather.Texture2D.LoadFrom(Image)
    id: LoadFrom(Image)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadFrom(Image)
    nameWithType: Texture2D.LoadFrom(Image)
    fullName: DotFeather.Texture2D.LoadFrom(Image)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 61
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static Texture2D LoadFrom(Image bmp)
      parameters:
        - id: bmp
          type: Image
      return:
        type: DotFeather.Texture2D
      content.vb: Public Shared Function LoadFrom(bmp As Image) As Texture2D
    overload: DotFeather.Texture2D.LoadFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.Create(System.Byte[0:,0:,0:])
    commentId: M:DotFeather.Texture2D.Create(System.Byte[0:,0:,0:])
    id: Create(System.Byte[0:,0:,0:])
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: Create(Byte[,,])
    nameWithType: Texture2D.Create(Byte[,,])
    fullName: DotFeather.Texture2D.Create(System.Byte[,,])
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Create
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 74
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nRegister a texture by a bitmap array.\n"
    example: []
    syntax:
      content: public static Texture2D Create(byte[,, ] bmp)
      parameters:
        - id: bmp
          type: System.Byte[,,]
      return:
        type: DotFeather.Texture2D
      content.vb: Public Shared Function Create(bmp As Byte(,,)) As Texture2D
    overload: DotFeather.Texture2D.Create*
    nameWithType.vb: Texture2D.Create(Byte(,,))
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
    fullName.vb: DotFeather.Texture2D.Create(System.Byte(,,))
    name.vb: Create(Byte(,,))
  - uid: DotFeather.Texture2D.Create(System.Byte[],System.Int32,System.Int32)
    commentId: M:DotFeather.Texture2D.Create(System.Byte[],System.Int32,System.Int32)
    id: Create(System.Byte[],System.Int32,System.Int32)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: Create(Byte[], Int32, Int32)
    nameWithType: Texture2D.Create(Byte[], Int32, Int32)
    fullName: DotFeather.Texture2D.Create(System.Byte[], System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Create
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 91
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nRegister a texture by a bitmap array.\n"
    example: []
    syntax:
      content: public static Texture2D Create(byte[] bmp, int width, int height)
      parameters:
        - id: bmp
          type: System.Byte[]
        - id: width
          type: System.Int32
        - id: height
          type: System.Int32
      return:
        type: DotFeather.Texture2D
      content.vb: Public Shared Function Create(bmp As Byte(), width As Integer, height As Integer) As Texture2D
    overload: DotFeather.Texture2D.Create*
    nameWithType.vb: Texture2D.Create(Byte(), Int32, Int32)
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
    fullName.vb: DotFeather.Texture2D.Create(System.Byte(), System.Int32, System.Int32)
    name.vb: Create(Byte(), Int32, Int32)
  - uid: DotFeather.Texture2D.CreateSolid(System.Drawing.Color,System.Int32,System.Int32)
    commentId: M:DotFeather.Texture2D.CreateSolid(System.Drawing.Color,System.Int32,System.Int32)
    id: CreateSolid(System.Drawing.Color,System.Int32,System.Int32)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: CreateSolid(Color, Int32, Int32)
    nameWithType: Texture2D.CreateSolid(Color, Int32, Int32)
    fullName: DotFeather.Texture2D.CreateSolid(System.Drawing.Color, System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: CreateSolid
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 106
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGenerate a solid color texture with specified color and size.\n"
    example: []
    syntax:
      content: public static Texture2D CreateSolid(Color color, int sizeX, int sizeY)
      parameters:
        - id: color
          type: System.Drawing.Color
        - id: sizeX
          type: System.Int32
        - id: sizeY
          type: System.Int32
      return:
        type: DotFeather.Texture2D
        description: Generated texture.
      content.vb: Public Shared Function CreateSolid(color As Color, sizeX As Integer, sizeY As Integer) As Texture2D
    overload: DotFeather.Texture2D.CreateSolid*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.CreateSolid(System.Drawing.Color,DotFeather.VectorInt)
    commentId: M:DotFeather.Texture2D.CreateSolid(System.Drawing.Color,DotFeather.VectorInt)
    id: CreateSolid(System.Drawing.Color,DotFeather.VectorInt)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: CreateSolid(Color, VectorInt)
    nameWithType: Texture2D.CreateSolid(Color, VectorInt)
    fullName: DotFeather.Texture2D.CreateSolid(System.Drawing.Color, DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: CreateSolid
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 125
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGenerate a solid color texture with specified color and size.\n"
    example: []
    syntax:
      content: public static Texture2D CreateSolid(Color color, VectorInt size)
      parameters:
        - id: color
          type: System.Drawing.Color
        - id: size
          type: DotFeather.VectorInt
      return:
        type: DotFeather.Texture2D
        description: Generated texture.
      content.vb: Public Shared Function CreateSolid(color As Color, size As VectorInt) As Texture2D
    overload: DotFeather.Texture2D.CreateSolid*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,DotFeather.VectorInt)
    commentId: M:DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,DotFeather.VectorInt)
    id: LoadAndSplitFrom(System.String,System.Int32,System.Int32,DotFeather.VectorInt)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadAndSplitFrom(String, Int32, Int32, VectorInt)
    nameWithType: Texture2D.LoadAndSplitFrom(String, Int32, Int32, VectorInt)
    fullName: DotFeather.Texture2D.LoadAndSplitFrom(System.String, System.Int32, System.Int32, DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadAndSplitFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 135
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nReads an image file and cuts it out in order from the top left at the specified size.\n"
    example: []
    syntax:
      content: public static Texture2D[] LoadAndSplitFrom(string path, int horizonalCount, int verticalCount, VectorInt sizeOfCroppedImage)
      parameters:
        - id: path
          type: System.String
          description: File path
        - id: horizonalCount
          type: System.Int32
          description: The number of images in the horizontal direction.
        - id: verticalCount
          type: System.Int32
          description: The number of images in the vertical direction.
        - id: sizeOfCroppedImage
          type: DotFeather.VectorInt
          description: The size of a piece of image.
      return:
        type: DotFeather.Texture2D[]
        description: All the image data cut out.
      content.vb: Public Shared Function LoadAndSplitFrom(path As String, horizonalCount As Integer, verticalCount As Integer, sizeOfCroppedImage As VectorInt) As Texture2D()
    overload: DotFeather.Texture2D.LoadAndSplitFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,DotFeather.VectorInt)
    commentId: M:DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,DotFeather.VectorInt)
    id: LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,DotFeather.VectorInt)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadAndSplitFrom(Stream, Int32, Int32, VectorInt)
    nameWithType: Texture2D.LoadAndSplitFrom(Stream, Int32, Int32, VectorInt)
    fullName: DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream, System.Int32, System.Int32, DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadAndSplitFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 148
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nReads an image file and cuts it out in order from the top left at the specified size.\n"
    example: []
    syntax:
      content: public static Texture2D[] LoadAndSplitFrom(Stream stream, int horizonalCount, int verticalCount, VectorInt sizeOfCroppedImage)
      parameters:
        - id: stream
          type: System.IO.Stream
          description: File stream
        - id: horizonalCount
          type: System.Int32
          description: The number of images in the horizontal direction.
        - id: verticalCount
          type: System.Int32
          description: The number of images in the vertical direction.
        - id: sizeOfCroppedImage
          type: DotFeather.VectorInt
          description: The size of a piece of image.
      return:
        type: DotFeather.Texture2D[]
        description: All the image data cut out.
      content.vb: Public Shared Function LoadAndSplitFrom(stream As Stream, horizonalCount As Integer, verticalCount As Integer, sizeOfCroppedImage As VectorInt) As Texture2D()
    overload: DotFeather.Texture2D.LoadAndSplitFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:DotFeather.Texture2D.LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
    id: LoadAndSplitFrom(System.String,System.Int32,System.Int32,System.Int32,System.Int32)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadAndSplitFrom(String, Int32, Int32, Int32, Int32)
    nameWithType: Texture2D.LoadAndSplitFrom(String, Int32, Int32, Int32, Int32)
    fullName: DotFeather.Texture2D.LoadAndSplitFrom(System.String, System.Int32, System.Int32, System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadAndSplitFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 161
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\n画像ファイルを読み込み、9スライス用に切り抜きます。\n"
    example: []
    syntax:
      content: public static Texture2D[] LoadAndSplitFrom(string path, int left, int top, int right, int bottom)
      parameters:
        - id: path
          type: System.String
          description: File path.
        - id: left
          type: System.Int32
          description: Pixel value from left.
        - id: top
          type: System.Int32
          description: Pixel value from top.
        - id: right
          type: System.Int32
          description: Pixel value from right.
        - id: bottom
          type: System.Int32
          description: Pixel value from bottom.
      return:
        type: DotFeather.Texture2D[]
      content.vb: Public Shared Function LoadAndSplitFrom(path As String, left As Integer, top As Integer, right As Integer, bottom As Integer) As Texture2D()
    overload: DotFeather.Texture2D.LoadAndSplitFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)
    id: LoadAndSplitFrom(System.IO.Stream,System.Int32,System.Int32,System.Int32,System.Int32)
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: LoadAndSplitFrom(Stream, Int32, Int32, Int32, Int32)
    nameWithType: Texture2D.LoadAndSplitFrom(Stream, Int32, Int32, Int32, Int32)
    fullName: DotFeather.Texture2D.LoadAndSplitFrom(System.IO.Stream, System.Int32, System.Int32, System.Int32, System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LoadAndSplitFrom
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 174
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nLoad an image file and cut it out for 9 slices.\n"
    example: []
    syntax:
      content: public static Texture2D[] LoadAndSplitFrom(Stream stream, int left, int top, int right, int bottom)
      parameters:
        - id: stream
          type: System.IO.Stream
          description: File stream.
        - id: left
          type: System.Int32
          description: Pixel value from left.
        - id: top
          type: System.Int32
          description: Pixel value from top.
        - id: right
          type: System.Int32
          description: Pixel value from right.
        - id: bottom
          type: System.Int32
          description: Pixel value from bottom.
      return:
        type: DotFeather.Texture2D[]
      content.vb: Public Shared Function LoadAndSplitFrom(stream As Stream, left As Integer, top As Integer, right As Integer, bottom As Integer) As Texture2D()
    overload: DotFeather.Texture2D.LoadAndSplitFrom*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.Texture2D.Dispose
    commentId: M:DotFeather.Texture2D.Dispose
    id: Dispose
    parent: DotFeather.Texture2D
    langs:
      - csharp
      - vb
    name: Dispose()
    nameWithType: Texture2D.Dispose()
    fullName: DotFeather.Texture2D.Dispose()
    type: Method
    source:
      remote:
        path: DotFeather/Graphics/Texture2D.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Dispose
      path: ../DotFeather/Graphics/Texture2D.cs
      startLine: 244
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nこの <xref href=\"DotFeather.Texture2D\" data-throw-if-not-resolved=\"false\"></xref> を破棄します。\n"
    example: []
    syntax:
      content: public void Dispose()
      content.vb: Public Sub Dispose
    overload: DotFeather.Texture2D.Dispose*
    implements:
      - System.IDisposable.Dispose
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.IDisposable
    commentId: T:System.IDisposable
    parent: System
    isExternal: true
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
  - uid: System.ValueType.Equals(System.Object)
    commentId: M:System.ValueType.Equals(System.Object)
    parent: System.ValueType
    isExternal: true
    name: Equals(Object)
    nameWithType: ValueType.Equals(Object)
    fullName: System.ValueType.Equals(System.Object)
    spec.csharp:
      - uid: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        fullName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        fullName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.ValueType.GetHashCode
    commentId: M:System.ValueType.GetHashCode
    parent: System.ValueType
    isExternal: true
    name: GetHashCode()
    nameWithType: ValueType.GetHashCode()
    fullName: System.ValueType.GetHashCode()
    spec.csharp:
      - uid: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        fullName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        fullName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.ValueType.ToString
    commentId: M:System.ValueType.ToString
    parent: System.ValueType
    isExternal: true
    name: ToString()
    nameWithType: ValueType.ToString()
    fullName: System.ValueType.ToString()
    spec.csharp:
      - uid: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        fullName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        fullName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: System.ValueType
    commentId: T:System.ValueType
    parent: System
    isExternal: true
    name: ValueType
    nameWithType: ValueType
    fullName: System.ValueType
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: DotFeather.Texture2D.Handle*
    commentId: Overload:DotFeather.Texture2D.Handle
    name: Handle
    nameWithType: Texture2D.Handle
    fullName: DotFeather.Texture2D.Handle
  - uid: System.Int32
    commentId: T:System.Int32
    parent: System
    isExternal: true
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - uid: DotFeather.Texture2D.Size*
    commentId: Overload:DotFeather.Texture2D.Size
    name: Size
    nameWithType: Texture2D.Size
    fullName: DotFeather.Texture2D.Size
  - uid: DotFeather.VectorInt
    commentId: T:DotFeather.VectorInt
    parent: DotFeather
    name: VectorInt
    nameWithType: VectorInt
    fullName: DotFeather.VectorInt
  - uid: DotFeather.Texture2D
    commentId: T:DotFeather.Texture2D
    parent: DotFeather
    name: Texture2D
    nameWithType: Texture2D
    fullName: DotFeather.Texture2D
  - uid: DotFeather.Texture2D.#ctor*
    commentId: Overload:DotFeather.Texture2D.#ctor
    name: Texture2D
    nameWithType: Texture2D.Texture2D
    fullName: DotFeather.Texture2D.Texture2D
  - uid: DotFeather.Texture2D.LoadFrom*
    commentId: Overload:DotFeather.Texture2D.LoadFrom
    name: LoadFrom
    nameWithType: Texture2D.LoadFrom
    fullName: DotFeather.Texture2D.LoadFrom
  - uid: System.String
    commentId: T:System.String
    parent: System
    isExternal: true
    name: String
    nameWithType: String
    fullName: System.String
  - uid: System.IO.Stream
    commentId: T:System.IO.Stream
    parent: System.IO
    isExternal: true
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - uid: System.IO
    commentId: N:System.IO
    isExternal: true
    name: System.IO
    nameWithType: System.IO
    fullName: System.IO
  - uid: Image
    isExternal: true
    name: Image
    nameWithType: Image
    fullName: Image
  - uid: DotFeather.Texture2D.Create*
    commentId: Overload:DotFeather.Texture2D.Create
    name: Create
    nameWithType: Texture2D.Create
    fullName: DotFeather.Texture2D.Create
  - uid: System.Byte[,,]
    isExternal: true
    name: Byte[,,]
    nameWithType: Byte[,,]
    fullName: System.Byte[,,]
    nameWithType.vb: Byte(,,)
    fullName.vb: System.Byte(,,)
    name.vb: Byte(,,)
    spec.csharp:
      - uid: System.Byte
        name: Byte
        nameWithType: Byte
        fullName: System.Byte
        isExternal: true
      - name: "[,,]"
        nameWithType: "[,,]"
        fullName: "[,,]"
    spec.vb:
      - uid: System.Byte
        name: Byte
        nameWithType: Byte
        fullName: System.Byte
        isExternal: true
      - name: (,,)
        nameWithType: (,,)
        fullName: (,,)
  - uid: System.Byte[]
    isExternal: true
    name: Byte[]
    nameWithType: Byte[]
    fullName: System.Byte[]
    nameWithType.vb: Byte()
    fullName.vb: System.Byte()
    name.vb: Byte()
    spec.csharp:
      - uid: System.Byte
        name: Byte
        nameWithType: Byte
        fullName: System.Byte
        isExternal: true
      - name: "[]"
        nameWithType: "[]"
        fullName: "[]"
    spec.vb:
      - uid: System.Byte
        name: Byte
        nameWithType: Byte
        fullName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        fullName: ()
  - uid: DotFeather.Texture2D.CreateSolid*
    commentId: Overload:DotFeather.Texture2D.CreateSolid
    name: CreateSolid
    nameWithType: Texture2D.CreateSolid
    fullName: DotFeather.Texture2D.CreateSolid
  - uid: System.Drawing.Color
    commentId: T:System.Drawing.Color
    parent: System.Drawing
    isExternal: true
    name: Color
    nameWithType: Color
    fullName: System.Drawing.Color
  - uid: System.Drawing
    commentId: N:System.Drawing
    isExternal: true
    name: System.Drawing
    nameWithType: System.Drawing
    fullName: System.Drawing
  - uid: DotFeather.Texture2D.LoadAndSplitFrom*
    commentId: Overload:DotFeather.Texture2D.LoadAndSplitFrom
    name: LoadAndSplitFrom
    nameWithType: Texture2D.LoadAndSplitFrom
    fullName: DotFeather.Texture2D.LoadAndSplitFrom
  - uid: DotFeather.Texture2D[]
    isExternal: true
    name: Texture2D[]
    nameWithType: Texture2D[]
    fullName: DotFeather.Texture2D[]
    nameWithType.vb: Texture2D()
    fullName.vb: DotFeather.Texture2D()
    name.vb: Texture2D()
    spec.csharp:
      - uid: DotFeather.Texture2D
        name: Texture2D
        nameWithType: Texture2D
        fullName: DotFeather.Texture2D
      - name: "[]"
        nameWithType: "[]"
        fullName: "[]"
    spec.vb:
      - uid: DotFeather.Texture2D
        name: Texture2D
        nameWithType: Texture2D
        fullName: DotFeather.Texture2D
      - name: ()
        nameWithType: ()
        fullName: ()
  - uid: DotFeather.Texture2D.Dispose*
    commentId: Overload:DotFeather.Texture2D.Dispose
    name: Dispose
    nameWithType: Texture2D.Dispose
    fullName: DotFeather.Texture2D.Dispose
  - uid: System.IDisposable.Dispose
    commentId: M:System.IDisposable.Dispose
    parent: System.IDisposable
    isExternal: true
    name: Dispose()
    nameWithType: IDisposable.Dispose()
    fullName: System.IDisposable.Dispose()
    spec.csharp:
      - uid: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        fullName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        fullName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
