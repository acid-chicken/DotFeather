### YamlMime:ManagedReference
items:
  - uid: DotFeather.OpenTKManagedHandleBase`1
    commentId: T:DotFeather.OpenTKManagedHandleBase`1
    id: OpenTKManagedHandleBase`1
    parent: DotFeather
    children:
      - DotFeather.OpenTKManagedHandleBase`1.#ctor
      - DotFeather.OpenTKManagedHandleBase`1.Dispose
      - DotFeather.OpenTKManagedHandleBase`1.DisposeHandle
      - DotFeather.OpenTKManagedHandleBase`1.GenerateHandle
      - DotFeather.OpenTKManagedHandleBase`1.Handle
      - DotFeather.OpenTKManagedHandleBase`1.op_Implicit(`0)~DotFeather.OpenTKManagedHandleBase{`0}
      - DotFeather.OpenTKManagedHandleBase`1.op_Implicit(DotFeather.OpenTKManagedHandleBase{`0})~`0
    langs:
      - csharp
      - vb
    name: OpenTKManagedHandleBase<T>
    nameWithType: OpenTKManagedHandleBase<T>
    fullName: DotFeather.OpenTKManagedHandleBase<T>
    type: Class
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: OpenTKManagedHandleBase
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 6
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nOpenTK のハンドルをラップするための抽象クラスです。\n"
    example: []
    syntax:
      content: "public abstract class OpenTKManagedHandleBase<T> : IDisposable"
      typeParameters:
        - id: T
      content.vb: >-
        Public MustInherit Class OpenTKManagedHandleBase(Of T)
            Implements IDisposable
    inheritance:
      - System.Object
    derivedClasses:
      - DotFeather.ALBuffer
      - DotFeather.ALSource
    implements:
      - System.IDisposable
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    nameWithType.vb: OpenTKManagedHandleBase(Of T)
    modifiers.csharp:
      - public
      - abstract
      - class
    modifiers.vb:
      - Public
      - MustInherit
      - Class
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T)
    name.vb: OpenTKManagedHandleBase(Of T)
  - uid: DotFeather.OpenTKManagedHandleBase`1.Handle
    commentId: P:DotFeather.OpenTKManagedHandleBase`1.Handle
    id: Handle
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: Handle
    nameWithType: OpenTKManagedHandleBase<T>.Handle
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Handle
    type: Property
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Handle
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 12
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nネイティブ ハンドルを取得します。\n"
    example: []
    syntax:
      content: public T Handle { get; }
      parameters: []
      return:
        type: "{T}"
        description: ""
      content.vb: Public ReadOnly Property Handle As T
    overload: DotFeather.OpenTKManagedHandleBase`1.Handle*
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Handle
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Handle
  - uid: DotFeather.OpenTKManagedHandleBase`1.GenerateHandle
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.GenerateHandle
    id: GenerateHandle
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: GenerateHandle()
    nameWithType: OpenTKManagedHandleBase<T>.GenerateHandle()
    fullName: DotFeather.OpenTKManagedHandleBase<T>.GenerateHandle()
    type: Method
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GenerateHandle
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 17
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nコンストラクターから呼び出されます。ここでハンドルを取得します。\n"
    example: []
    syntax:
      content: public abstract T GenerateHandle()
      return:
        type: "{T}"
      content.vb: Public MustOverride Function GenerateHandle As T
    overload: DotFeather.OpenTKManagedHandleBase`1.GenerateHandle*
    nameWithType.vb: OpenTKManagedHandleBase(Of T).GenerateHandle()
    modifiers.csharp:
      - public
      - abstract
    modifiers.vb:
      - Public
      - MustOverride
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).GenerateHandle()
  - uid: DotFeather.OpenTKManagedHandleBase`1.DisposeHandle
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.DisposeHandle
    id: DisposeHandle
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: DisposeHandle()
    nameWithType: OpenTKManagedHandleBase<T>.DisposeHandle()
    fullName: DotFeather.OpenTKManagedHandleBase<T>.DisposeHandle()
    type: Method
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: DisposeHandle
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 21
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\n<xref href=\"DotFeather.OpenTKManagedHandleBase%601.Dispose\" data-throw-if-not-resolved=\"false\"></xref> メソッドから呼ばれます。ここでハンドルを破棄します。\n"
    example: []
    syntax:
      content: public abstract void DisposeHandle()
      content.vb: Public MustOverride Sub DisposeHandle
    overload: DotFeather.OpenTKManagedHandleBase`1.DisposeHandle*
    nameWithType.vb: OpenTKManagedHandleBase(Of T).DisposeHandle()
    modifiers.csharp:
      - public
      - abstract
    modifiers.vb:
      - Public
      - MustOverride
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).DisposeHandle()
  - uid: DotFeather.OpenTKManagedHandleBase`1.#ctor
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.#ctor
    id: "#ctor"
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: OpenTKManagedHandleBase()
    nameWithType: OpenTKManagedHandleBase<T>.OpenTKManagedHandleBase()
    fullName: DotFeather.OpenTKManagedHandleBase<T>.OpenTKManagedHandleBase()
    type: Constructor
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: .ctor
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 26
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\n<xref href=\"DotFeather.OpenTKManagedHandleBase%601\" data-throw-if-not-resolved=\"false\"></xref> クラスの新しいインスタンスを初期化します。\n"
    example: []
    syntax:
      content: protected OpenTKManagedHandleBase()
      content.vb: Protected Sub New
    overload: DotFeather.OpenTKManagedHandleBase`1.#ctor*
    nameWithType.vb: OpenTKManagedHandleBase(Of T).OpenTKManagedHandleBase()
    modifiers.csharp:
      - protected
    modifiers.vb:
      - Protected
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).OpenTKManagedHandleBase()
  - uid: DotFeather.OpenTKManagedHandleBase`1.Dispose
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.Dispose
    id: Dispose
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: Dispose()
    nameWithType: OpenTKManagedHandleBase<T>.Dispose()
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Dispose()
    type: Method
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Dispose
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 34
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nこの <xref href=\"DotFeather.OpenTKManagedHandleBase%601\" data-throw-if-not-resolved=\"false\"></xref> を破棄します。\n"
    example: []
    syntax:
      content: public void Dispose()
      content.vb: Public Sub Dispose
    overload: DotFeather.OpenTKManagedHandleBase`1.Dispose*
    implements:
      - System.IDisposable.Dispose
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Dispose()
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Dispose()
  - uid: DotFeather.OpenTKManagedHandleBase`1.op_Implicit(DotFeather.OpenTKManagedHandleBase{`0})~`0
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.op_Implicit(DotFeather.OpenTKManagedHandleBase{`0})~`0
    id: op_Implicit(DotFeather.OpenTKManagedHandleBase{`0})~`0
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: Implicit(OpenTKManagedHandleBase<T> to T)
    nameWithType: OpenTKManagedHandleBase<T>.Implicit(OpenTKManagedHandleBase<T> to T)
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Implicit(DotFeather.OpenTKManagedHandleBase<T> to T)
    type: Operator
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Implicit
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 46
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nハンドルを整数に暗黙変換します。\n"
    example: []
    syntax:
      content: public static implicit operator T(OpenTKManagedHandleBase<T> handle)
      parameters:
        - id: handle
          type: DotFeather.OpenTKManagedHandleBase{{T}}
      return:
        type: "{T}"
      content.vb: Public Shared Widening Operator CType(handle As OpenTKManagedHandleBase(Of T)) As T
    overload: DotFeather.OpenTKManagedHandleBase`1.op_Implicit*
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Widening(OpenTKManagedHandleBase(Of T) to T)
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Widening(DotFeather.OpenTKManagedHandleBase(Of T) to T)
    name.vb: Widening(OpenTKManagedHandleBase(Of T) to T)
  - uid: DotFeather.OpenTKManagedHandleBase`1.op_Implicit(`0)~DotFeather.OpenTKManagedHandleBase{`0}
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.op_Implicit(`0)~DotFeather.OpenTKManagedHandleBase{`0}
    id: op_Implicit(`0)~DotFeather.OpenTKManagedHandleBase{`0}
    parent: DotFeather.OpenTKManagedHandleBase`1
    langs:
      - csharp
      - vb
    name: Implicit(T to OpenTKManagedHandleBase<T>)
    nameWithType: OpenTKManagedHandleBase<T>.Implicit(T to OpenTKManagedHandleBase<T>)
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Implicit(T to DotFeather.OpenTKManagedHandleBase<T>)
    type: Operator
    source:
      remote:
        path: DotFeather/Helpers/OpenTKManagedHandleBase.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Implicit
      path: ../DotFeather/Helpers/OpenTKManagedHandleBase.cs
      startLine: 51
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\n整数をハンドルに暗黙変換します。\n"
    example: []
    syntax:
      content: public static implicit operator OpenTKManagedHandleBase<T>(T handle)
      parameters:
        - id: handle
          type: "{T}"
      return:
        type: DotFeather.OpenTKManagedHandleBase{{T}}
      content.vb: Public Shared Widening Operator CType(handle As T) As OpenTKManagedHandleBase(Of T)
    overload: DotFeather.OpenTKManagedHandleBase`1.op_Implicit*
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Widening(T to OpenTKManagedHandleBase(Of T))
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Widening(T to DotFeather.OpenTKManagedHandleBase(Of T))
    name.vb: Widening(T to OpenTKManagedHandleBase(Of T))
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: System.IDisposable
    commentId: T:System.IDisposable
    parent: System
    isExternal: true
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.OpenTKManagedHandleBase`1.Handle*
    commentId: Overload:DotFeather.OpenTKManagedHandleBase`1.Handle
    name: Handle
    nameWithType: OpenTKManagedHandleBase<T>.Handle
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Handle
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Handle
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Handle
  - uid: "{T}"
    commentId: "!:T"
    definition: T
    name: T
    nameWithType: T
    fullName: T
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - uid: DotFeather.OpenTKManagedHandleBase`1.GenerateHandle*
    commentId: Overload:DotFeather.OpenTKManagedHandleBase`1.GenerateHandle
    name: GenerateHandle
    nameWithType: OpenTKManagedHandleBase<T>.GenerateHandle
    fullName: DotFeather.OpenTKManagedHandleBase<T>.GenerateHandle
    nameWithType.vb: OpenTKManagedHandleBase(Of T).GenerateHandle
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).GenerateHandle
  - uid: DotFeather.OpenTKManagedHandleBase`1.Dispose
    commentId: M:DotFeather.OpenTKManagedHandleBase`1.Dispose
    name: Dispose()
    nameWithType: OpenTKManagedHandleBase<T>.Dispose()
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Dispose()
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Dispose()
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Dispose()
    spec.csharp:
      - uid: DotFeather.OpenTKManagedHandleBase`1.Dispose
        name: Dispose
        nameWithType: OpenTKManagedHandleBase<T>.Dispose
        fullName: DotFeather.OpenTKManagedHandleBase<T>.Dispose
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: DotFeather.OpenTKManagedHandleBase`1.Dispose
        name: Dispose
        nameWithType: OpenTKManagedHandleBase(Of T).Dispose
        fullName: DotFeather.OpenTKManagedHandleBase(Of T).Dispose
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.OpenTKManagedHandleBase`1.DisposeHandle*
    commentId: Overload:DotFeather.OpenTKManagedHandleBase`1.DisposeHandle
    name: DisposeHandle
    nameWithType: OpenTKManagedHandleBase<T>.DisposeHandle
    fullName: DotFeather.OpenTKManagedHandleBase<T>.DisposeHandle
    nameWithType.vb: OpenTKManagedHandleBase(Of T).DisposeHandle
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).DisposeHandle
  - uid: DotFeather.OpenTKManagedHandleBase`1
    commentId: T:DotFeather.OpenTKManagedHandleBase`1
    name: OpenTKManagedHandleBase<T>
    nameWithType: OpenTKManagedHandleBase<T>
    fullName: DotFeather.OpenTKManagedHandleBase<T>
    nameWithType.vb: OpenTKManagedHandleBase(Of T)
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T)
    name.vb: OpenTKManagedHandleBase(Of T)
    spec.csharp:
      - uid: DotFeather.OpenTKManagedHandleBase`1
        name: OpenTKManagedHandleBase
        nameWithType: OpenTKManagedHandleBase
        fullName: DotFeather.OpenTKManagedHandleBase
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: DotFeather.OpenTKManagedHandleBase`1
        name: OpenTKManagedHandleBase
        nameWithType: OpenTKManagedHandleBase
        fullName: DotFeather.OpenTKManagedHandleBase
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.OpenTKManagedHandleBase`1.#ctor*
    commentId: Overload:DotFeather.OpenTKManagedHandleBase`1.#ctor
    name: OpenTKManagedHandleBase
    nameWithType: OpenTKManagedHandleBase<T>.OpenTKManagedHandleBase
    fullName: DotFeather.OpenTKManagedHandleBase<T>.OpenTKManagedHandleBase
    nameWithType.vb: OpenTKManagedHandleBase(Of T).OpenTKManagedHandleBase
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).OpenTKManagedHandleBase
  - uid: DotFeather.OpenTKManagedHandleBase`1.Dispose*
    commentId: Overload:DotFeather.OpenTKManagedHandleBase`1.Dispose
    name: Dispose
    nameWithType: OpenTKManagedHandleBase<T>.Dispose
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Dispose
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Dispose
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Dispose
  - uid: System.IDisposable.Dispose
    commentId: M:System.IDisposable.Dispose
    parent: System.IDisposable
    isExternal: true
    name: Dispose()
    nameWithType: IDisposable.Dispose()
    fullName: System.IDisposable.Dispose()
    spec.csharp:
      - uid: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        fullName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        fullName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.OpenTKManagedHandleBase`1.op_Implicit*
    commentId: Overload:DotFeather.OpenTKManagedHandleBase`1.op_Implicit
    name: Implicit
    nameWithType: OpenTKManagedHandleBase<T>.Implicit
    fullName: DotFeather.OpenTKManagedHandleBase<T>.Implicit
    nameWithType.vb: OpenTKManagedHandleBase(Of T).Widening
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T).Widening
    name.vb: Widening
  - uid: DotFeather.OpenTKManagedHandleBase{{T}}
    commentId: T:DotFeather.OpenTKManagedHandleBase{`0}
    parent: DotFeather
    definition: DotFeather.OpenTKManagedHandleBase`1
    name: OpenTKManagedHandleBase<T>
    nameWithType: OpenTKManagedHandleBase<T>
    fullName: DotFeather.OpenTKManagedHandleBase<T>
    nameWithType.vb: OpenTKManagedHandleBase(Of T)
    fullName.vb: DotFeather.OpenTKManagedHandleBase(Of T)
    name.vb: OpenTKManagedHandleBase(Of T)
    spec.csharp:
      - uid: DotFeather.OpenTKManagedHandleBase`1
        name: OpenTKManagedHandleBase
        nameWithType: OpenTKManagedHandleBase
        fullName: DotFeather.OpenTKManagedHandleBase
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: DotFeather.OpenTKManagedHandleBase`1
        name: OpenTKManagedHandleBase
        nameWithType: OpenTKManagedHandleBase
        fullName: DotFeather.OpenTKManagedHandleBase
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
