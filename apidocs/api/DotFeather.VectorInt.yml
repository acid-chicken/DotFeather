### YamlMime:ManagedReference
items:
  - uid: DotFeather.VectorInt
    commentId: T:DotFeather.VectorInt
    id: VectorInt
    parent: DotFeather
    children:
      - DotFeather.VectorInt.#ctor(System.Int32,System.Int32)
      - DotFeather.VectorInt.Angle
      - DotFeather.VectorInt.Angle(DotFeather.VectorInt)
      - DotFeather.VectorInt.Angle(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.Deconstruct(System.Int32@,System.Int32@)
      - DotFeather.VectorInt.Distance(DotFeather.VectorInt)
      - DotFeather.VectorInt.Distance(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.Down
      - DotFeather.VectorInt.Equals(DotFeather.VectorInt)
      - DotFeather.VectorInt.Equals(System.Object)
      - DotFeather.VectorInt.GetHashCode
      - DotFeather.VectorInt.Left
      - DotFeather.VectorInt.Magnitude
      - DotFeather.VectorInt.Normalized
      - DotFeather.VectorInt.One
      - DotFeather.VectorInt.op_Addition(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.op_Division(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.op_Division(DotFeather.VectorInt,System.Int32)
      - DotFeather.VectorInt.op_Equality(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.op_Implicit(DotFeather.VectorInt)~DotFeather.Vector
      - DotFeather.VectorInt.op_Inequality(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.op_Multiply(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.op_Multiply(DotFeather.VectorInt,System.Int32)
      - DotFeather.VectorInt.op_Subtraction(DotFeather.VectorInt,DotFeather.VectorInt)
      - DotFeather.VectorInt.op_UnaryNegation(DotFeather.VectorInt)
      - DotFeather.VectorInt.Right
      - DotFeather.VectorInt.ToString
      - DotFeather.VectorInt.Up
      - DotFeather.VectorInt.X
      - DotFeather.VectorInt.Y
      - DotFeather.VectorInt.Zero
    langs:
      - csharp
      - vb
    name: VectorInt
    nameWithType: VectorInt
    fullName: DotFeather.VectorInt
    type: Struct
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: VectorInt
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 6
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nTwo dimensional vector.\n"
    example: []
    syntax:
      content: "public struct VectorInt : IEquatable<VectorInt>"
      content.vb: >-
        Public Structure VectorInt
            Implements IEquatable(Of VectorInt)
    implements:
      - System.IEquatable{DotFeather.VectorInt}
    inheritedMembers:
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetType
      - System.Object.ReferenceEquals(System.Object,System.Object)
    modifiers.csharp:
      - public
      - struct
    modifiers.vb:
      - Public
      - Structure
  - uid: DotFeather.VectorInt.X
    commentId: P:DotFeather.VectorInt.X
    id: X
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: X
    nameWithType: VectorInt.X
    fullName: DotFeather.VectorInt.X
    type: Property
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: X
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 11
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set X coordinate of this vector.\n"
    example: []
    syntax:
      content: public int X { get; set; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public Property X As Integer
    overload: DotFeather.VectorInt.X*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.Y
    commentId: P:DotFeather.VectorInt.Y
    id: Y
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Y
    nameWithType: VectorInt.Y
    fullName: DotFeather.VectorInt.Y
    type: Property
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Y
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 16
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set Y coordinate of this vector.\n"
    example: []
    syntax:
      content: public int Y { get; set; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public Property Y As Integer
    overload: DotFeather.VectorInt.Y*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.Magnitude
    commentId: P:DotFeather.VectorInt.Magnitude
    id: Magnitude
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Magnitude
    nameWithType: VectorInt.Magnitude
    fullName: DotFeather.VectorInt.Magnitude
    type: Property
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Magnitude
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 21
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet length of this vector.\n"
    example: []
    syntax:
      content: public float Magnitude { get; }
      parameters: []
      return:
        type: System.Single
      content.vb: Public ReadOnly Property Magnitude As Single
    overload: DotFeather.VectorInt.Magnitude*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.VectorInt.Normalized
    commentId: P:DotFeather.VectorInt.Normalized
    id: Normalized
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Normalized
    nameWithType: VectorInt.Normalized
    fullName: DotFeather.VectorInt.Normalized
    type: Property
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Normalized
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 26
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet a unit vector with the same orientation as this vector.\n"
    example: []
    syntax:
      content: public Vector Normalized { get; }
      parameters: []
      return:
        type: DotFeather.Vector
      content.vb: Public ReadOnly Property Normalized As Vector
    overload: DotFeather.VectorInt.Normalized*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.VectorInt.#ctor(System.Int32,System.Int32)
    commentId: M:DotFeather.VectorInt.#ctor(System.Int32,System.Int32)
    id: "#ctor(System.Int32,System.Int32)"
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: VectorInt(Int32, Int32)
    nameWithType: VectorInt.VectorInt(Int32, Int32)
    fullName: DotFeather.VectorInt.VectorInt(System.Int32, System.Int32)
    type: Constructor
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: .ctor
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 33
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nInitialize a new instance of <xref href=\"DotFeather.Vector\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
    example: []
    syntax:
      content: public VectorInt(int x, int y)
      parameters:
        - id: x
          type: System.Int32
          description: ""
        - id: y
          type: System.Int32
          description: ""
      content.vb: Public Sub New(x As Integer, y As Integer)
    overload: DotFeather.VectorInt.#ctor*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.op_Addition(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_Addition(DotFeather.VectorInt,DotFeather.VectorInt)
    id: op_Addition(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Addition(VectorInt, VectorInt)
    nameWithType: VectorInt.Addition(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Addition(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Addition
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 39
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator +(VectorInt v1, VectorInt v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: DotFeather.VectorInt
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator +(v1 As VectorInt, v2 As VectorInt) As VectorInt
    overload: DotFeather.VectorInt.op_Addition*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Subtraction(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_Subtraction(DotFeather.VectorInt,DotFeather.VectorInt)
    id: op_Subtraction(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Subtraction(VectorInt, VectorInt)
    nameWithType: VectorInt.Subtraction(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Subtraction(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Subtraction
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 41
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator -(VectorInt v1, VectorInt v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: DotFeather.VectorInt
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator -(v1 As VectorInt, v2 As VectorInt) As VectorInt
    overload: DotFeather.VectorInt.op_Subtraction*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Multiply(DotFeather.VectorInt,System.Int32)
    commentId: M:DotFeather.VectorInt.op_Multiply(DotFeather.VectorInt,System.Int32)
    id: op_Multiply(DotFeather.VectorInt,System.Int32)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Multiply(VectorInt, Int32)
    nameWithType: VectorInt.Multiply(VectorInt, Int32)
    fullName: DotFeather.VectorInt.Multiply(DotFeather.VectorInt, System.Int32)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Multiply
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 43
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator *(VectorInt v1, int v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: System.Int32
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator *(v1 As VectorInt, v2 As Integer) As VectorInt
    overload: DotFeather.VectorInt.op_Multiply*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Multiply(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_Multiply(DotFeather.VectorInt,DotFeather.VectorInt)
    id: op_Multiply(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Multiply(VectorInt, VectorInt)
    nameWithType: VectorInt.Multiply(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Multiply(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Multiply
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 45
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator *(VectorInt v1, VectorInt v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: DotFeather.VectorInt
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator *(v1 As VectorInt, v2 As VectorInt) As VectorInt
    overload: DotFeather.VectorInt.op_Multiply*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Division(DotFeather.VectorInt,System.Int32)
    commentId: M:DotFeather.VectorInt.op_Division(DotFeather.VectorInt,System.Int32)
    id: op_Division(DotFeather.VectorInt,System.Int32)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Division(VectorInt, Int32)
    nameWithType: VectorInt.Division(VectorInt, Int32)
    fullName: DotFeather.VectorInt.Division(DotFeather.VectorInt, System.Int32)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Division
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 47
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator /(VectorInt v1, int v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: System.Int32
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator /(v1 As VectorInt, v2 As Integer) As VectorInt
    overload: DotFeather.VectorInt.op_Division*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Division(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_Division(DotFeather.VectorInt,DotFeather.VectorInt)
    id: op_Division(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Division(VectorInt, VectorInt)
    nameWithType: VectorInt.Division(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Division(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Division
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 49
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator /(VectorInt v1, VectorInt v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: DotFeather.VectorInt
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator /(v1 As VectorInt, v2 As VectorInt) As VectorInt
    overload: DotFeather.VectorInt.op_Division*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_UnaryNegation(DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_UnaryNegation(DotFeather.VectorInt)
    id: op_UnaryNegation(DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: UnaryNegation(VectorInt)
    nameWithType: VectorInt.UnaryNegation(VectorInt)
    fullName: DotFeather.VectorInt.UnaryNegation(DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_UnaryNegation
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 51
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static VectorInt operator -(VectorInt v1)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared Operator -(v1 As VectorInt) As VectorInt
    overload: DotFeather.VectorInt.op_UnaryNegation*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Implicit(DotFeather.VectorInt)~DotFeather.Vector
    commentId: M:DotFeather.VectorInt.op_Implicit(DotFeather.VectorInt)~DotFeather.Vector
    id: op_Implicit(DotFeather.VectorInt)~DotFeather.Vector
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Implicit(VectorInt to Vector)
    nameWithType: VectorInt.Implicit(VectorInt to Vector)
    fullName: DotFeather.VectorInt.Implicit(DotFeather.VectorInt to DotFeather.Vector)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Implicit
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 53
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static implicit operator Vector(VectorInt v1)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
      return:
        type: DotFeather.Vector
      content.vb: Public Shared Widening Operator CType(v1 As VectorInt) As Vector
    overload: DotFeather.VectorInt.op_Implicit*
    nameWithType.vb: VectorInt.Widening(VectorInt to Vector)
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
    fullName.vb: DotFeather.VectorInt.Widening(DotFeather.VectorInt to DotFeather.Vector)
    name.vb: Widening(VectorInt to Vector)
  - uid: DotFeather.VectorInt.op_Equality(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_Equality(DotFeather.VectorInt,DotFeather.VectorInt)
    id: op_Equality(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Equality(VectorInt, VectorInt)
    nameWithType: VectorInt.Equality(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Equality(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Equality
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 55
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static bool operator ==(VectorInt v1, VectorInt v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: DotFeather.VectorInt
      return:
        type: System.Boolean
      content.vb: Public Shared Operator =(v1 As VectorInt, v2 As VectorInt) As Boolean
    overload: DotFeather.VectorInt.op_Equality*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.op_Inequality(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.op_Inequality(DotFeather.VectorInt,DotFeather.VectorInt)
    id: op_Inequality(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Inequality(VectorInt, VectorInt)
    nameWithType: VectorInt.Inequality(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Inequality(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Operator
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: op_Inequality
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 57
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public static bool operator !=(VectorInt v1, VectorInt v2)
      parameters:
        - id: v1
          type: DotFeather.VectorInt
        - id: v2
          type: DotFeather.VectorInt
      return:
        type: System.Boolean
      content.vb: Public Shared Operator <>(v1 As VectorInt, v2 As VectorInt) As Boolean
    overload: DotFeather.VectorInt.op_Inequality*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.Angle(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.Angle(DotFeather.VectorInt,DotFeather.VectorInt)
    id: Angle(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Angle(VectorInt, VectorInt)
    nameWithType: VectorInt.Angle(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Angle(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Angle
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 63
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet angle between 2 vectors.\n"
    example: []
    syntax:
      content: public static float Angle(VectorInt from, VectorInt to)
      parameters:
        - id: from
          type: DotFeather.VectorInt
        - id: to
          type: DotFeather.VectorInt
      return:
        type: System.Single
        description: Radian angle between 2 vectors.
      content.vb: Public Shared Function Angle(from As VectorInt, to As VectorInt) As Single
    overload: DotFeather.VectorInt.Angle*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.Distance(DotFeather.VectorInt,DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.Distance(DotFeather.VectorInt,DotFeather.VectorInt)
    id: Distance(DotFeather.VectorInt,DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Distance(VectorInt, VectorInt)
    nameWithType: VectorInt.Distance(VectorInt, VectorInt)
    fullName: DotFeather.VectorInt.Distance(DotFeather.VectorInt, DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Distance
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 69
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the distance between 2 vectors.\n"
    example: []
    syntax:
      content: public static float Distance(VectorInt from, VectorInt to)
      parameters:
        - id: from
          type: DotFeather.VectorInt
        - id: to
          type: DotFeather.VectorInt
      return:
        type: System.Single
      content.vb: Public Shared Function Distance(from As VectorInt, to As VectorInt) As Single
    overload: DotFeather.VectorInt.Distance*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.VectorInt.Equals(System.Object)
    commentId: M:DotFeather.VectorInt.Equals(System.Object)
    id: Equals(System.Object)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Equals(Object)
    nameWithType: VectorInt.Equals(Object)
    fullName: DotFeather.VectorInt.Equals(System.Object)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Equals
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 76
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nCompare this object.\n"
    example: []
    syntax:
      content: public override bool Equals(object obj)
      parameters:
        - id: obj
          type: System.Object
      return:
        type: System.Boolean
      content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    overridden: System.ValueType.Equals(System.Object)
    overload: DotFeather.VectorInt.Equals*
    modifiers.csharp:
      - public
      - override
    modifiers.vb:
      - Public
      - Overrides
  - uid: DotFeather.VectorInt.Equals(DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.Equals(DotFeather.VectorInt)
    id: Equals(DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Equals(VectorInt)
    nameWithType: VectorInt.Equals(VectorInt)
    fullName: DotFeather.VectorInt.Equals(DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Equals
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 84
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nCompare this object.\n"
    example: []
    syntax:
      content: public bool Equals(VectorInt other)
      parameters:
        - id: other
          type: DotFeather.VectorInt
      return:
        type: System.Boolean
      content.vb: Public Function Equals(other As VectorInt) As Boolean
    overload: DotFeather.VectorInt.Equals*
    implements:
      - System.IEquatable{DotFeather.VectorInt}.Equals(DotFeather.VectorInt)
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.GetHashCode
    commentId: M:DotFeather.VectorInt.GetHashCode
    id: GetHashCode
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: GetHashCode()
    nameWithType: VectorInt.GetHashCode()
    fullName: DotFeather.VectorInt.GetHashCode()
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: GetHashCode
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 93
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the hash value of this object.\n"
    example: []
    syntax:
      content: public override int GetHashCode()
      return:
        type: System.Int32
      content.vb: Public Overrides Function GetHashCode As Integer
    overridden: System.ValueType.GetHashCode
    overload: DotFeather.VectorInt.GetHashCode*
    modifiers.csharp:
      - public
      - override
    modifiers.vb:
      - Public
      - Overrides
  - uid: DotFeather.VectorInt.Angle
    commentId: M:DotFeather.VectorInt.Angle
    id: Angle
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Angle()
    nameWithType: VectorInt.Angle()
    fullName: DotFeather.VectorInt.Angle()
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Angle
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 104
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet angle of this vector.\n"
    example: []
    syntax:
      content: public float Angle()
      return:
        type: System.Single
      content.vb: Public Function Angle As Single
    overload: DotFeather.VectorInt.Angle*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.Angle(DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.Angle(DotFeather.VectorInt)
    id: Angle(DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Angle(VectorInt)
    nameWithType: VectorInt.Angle(VectorInt)
    fullName: DotFeather.VectorInt.Angle(DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Angle
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 110
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the direction of the specified vector relative to this vector.\n"
    example: []
    syntax:
      content: public float Angle(VectorInt to)
      parameters:
        - id: to
          type: DotFeather.VectorInt
      return:
        type: System.Single
      content.vb: Public Function Angle(to As VectorInt) As Single
    overload: DotFeather.VectorInt.Angle*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.Distance(DotFeather.VectorInt)
    commentId: M:DotFeather.VectorInt.Distance(DotFeather.VectorInt)
    id: Distance(DotFeather.VectorInt)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Distance(VectorInt)
    nameWithType: VectorInt.Distance(VectorInt)
    fullName: DotFeather.VectorInt.Distance(DotFeather.VectorInt)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Distance
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 115
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the distance between two vectors.\n"
    example: []
    syntax:
      content: public float Distance(VectorInt to)
      parameters:
        - id: to
          type: DotFeather.VectorInt
      return:
        type: System.Single
      content.vb: Public Function Distance(to As VectorInt) As Single
    overload: DotFeather.VectorInt.Distance*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.VectorInt.Deconstruct(System.Int32@,System.Int32@)
    commentId: M:DotFeather.VectorInt.Deconstruct(System.Int32@,System.Int32@)
    id: Deconstruct(System.Int32@,System.Int32@)
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Deconstruct(out Int32, out Int32)
    nameWithType: VectorInt.Deconstruct(out Int32, out Int32)
    fullName: DotFeather.VectorInt.Deconstruct(out System.Int32, out System.Int32)
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Deconstruct
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 120
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nDeconstructs x and y.\n"
    example: []
    syntax:
      content: public void Deconstruct(out int x, out int y)
      parameters:
        - id: x
          type: System.Int32
        - id: y
          type: System.Int32
      content.vb: Public Sub Deconstruct(ByRef x As Integer, ByRef y As Integer)
    overload: DotFeather.VectorInt.Deconstruct*
    nameWithType.vb: VectorInt.Deconstruct(ByRef Int32, ByRef Int32)
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.VectorInt.Deconstruct(ByRef System.Int32, ByRef System.Int32)
    name.vb: Deconstruct(ByRef Int32, ByRef Int32)
  - uid: DotFeather.VectorInt.ToString
    commentId: M:DotFeather.VectorInt.ToString
    id: ToString
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: ToString()
    nameWithType: VectorInt.ToString()
    fullName: DotFeather.VectorInt.ToString()
    type: Method
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ToString
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 125
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet formatted string of this vector.\n"
    example: []
    syntax:
      content: public override string ToString()
      return:
        type: System.String
      content.vb: Public Overrides Function ToString As String
    overridden: System.ValueType.ToString
    overload: DotFeather.VectorInt.ToString*
    modifiers.csharp:
      - public
      - override
    modifiers.vb:
      - Public
      - Overrides
  - uid: DotFeather.VectorInt.Zero
    commentId: F:DotFeather.VectorInt.Zero
    id: Zero
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Zero
    nameWithType: VectorInt.Zero
    fullName: DotFeather.VectorInt.Zero
    type: Field
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Zero
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 130
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet <code>new VectorInt(0, 0)</code>.\n"
    example: []
    syntax:
      content: public static readonly VectorInt Zero
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared ReadOnly Zero As VectorInt
    modifiers.csharp:
      - public
      - static
      - readonly
    modifiers.vb:
      - Public
      - Shared
      - ReadOnly
  - uid: DotFeather.VectorInt.One
    commentId: F:DotFeather.VectorInt.One
    id: One
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: One
    nameWithType: VectorInt.One
    fullName: DotFeather.VectorInt.One
    type: Field
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: One
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 135
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet <code>new VectorInt(1, 1)</code>.\n"
    example: []
    syntax:
      content: public static readonly VectorInt One
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared ReadOnly One As VectorInt
    modifiers.csharp:
      - public
      - static
      - readonly
    modifiers.vb:
      - Public
      - Shared
      - ReadOnly
  - uid: DotFeather.VectorInt.Left
    commentId: F:DotFeather.VectorInt.Left
    id: Left
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Left
    nameWithType: VectorInt.Left
    fullName: DotFeather.VectorInt.Left
    type: Field
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Left
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 140
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet <code>new VectorInt(-1, 0)</code>.\n"
    example: []
    syntax:
      content: public static readonly VectorInt Left
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared ReadOnly Left As VectorInt
    modifiers.csharp:
      - public
      - static
      - readonly
    modifiers.vb:
      - Public
      - Shared
      - ReadOnly
  - uid: DotFeather.VectorInt.Up
    commentId: F:DotFeather.VectorInt.Up
    id: Up
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Up
    nameWithType: VectorInt.Up
    fullName: DotFeather.VectorInt.Up
    type: Field
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Up
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 145
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet <code>new VectorInt(0, -1)</code>.\n"
    example: []
    syntax:
      content: public static readonly VectorInt Up
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared ReadOnly Up As VectorInt
    modifiers.csharp:
      - public
      - static
      - readonly
    modifiers.vb:
      - Public
      - Shared
      - ReadOnly
  - uid: DotFeather.VectorInt.Right
    commentId: F:DotFeather.VectorInt.Right
    id: Right
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Right
    nameWithType: VectorInt.Right
    fullName: DotFeather.VectorInt.Right
    type: Field
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Right
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 150
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet <code>new VectorInt(1, 0)</code>.\n"
    example: []
    syntax:
      content: public static readonly VectorInt Right
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared ReadOnly Right As VectorInt
    modifiers.csharp:
      - public
      - static
      - readonly
    modifiers.vb:
      - Public
      - Shared
      - ReadOnly
  - uid: DotFeather.VectorInt.Down
    commentId: F:DotFeather.VectorInt.Down
    id: Down
    parent: DotFeather.VectorInt
    langs:
      - csharp
      - vb
    name: Down
    nameWithType: VectorInt.Down
    fullName: DotFeather.VectorInt.Down
    type: Field
    source:
      remote:
        path: DotFeather/Math/VectorInt.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Down
      path: ../DotFeather/Math/VectorInt.cs
      startLine: 155
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet <code>new VectorInt(0, 1)</code>.\n"
    example: []
    syntax:
      content: public static readonly VectorInt Down
      return:
        type: DotFeather.VectorInt
      content.vb: Public Shared ReadOnly Down As VectorInt
    modifiers.csharp:
      - public
      - static
      - readonly
    modifiers.vb:
      - Public
      - Shared
      - ReadOnly
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.IEquatable{DotFeather.VectorInt}
    commentId: T:System.IEquatable{DotFeather.VectorInt}
    parent: System
    definition: System.IEquatable`1
    name: IEquatable<VectorInt>
    nameWithType: IEquatable<VectorInt>
    fullName: System.IEquatable<DotFeather.VectorInt>
    nameWithType.vb: IEquatable(Of VectorInt)
    fullName.vb: System.IEquatable(Of DotFeather.VectorInt)
    name.vb: IEquatable(Of VectorInt)
    spec.csharp:
      - uid: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        fullName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: DotFeather.VectorInt
        name: VectorInt
        nameWithType: VectorInt
        fullName: DotFeather.VectorInt
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        fullName: System.IEquatable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: DotFeather.VectorInt
        name: VectorInt
        nameWithType: VectorInt
        fullName: DotFeather.VectorInt
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.IEquatable`1
    commentId: T:System.IEquatable`1
    isExternal: true
    name: IEquatable<T>
    nameWithType: IEquatable<T>
    fullName: System.IEquatable<T>
    nameWithType.vb: IEquatable(Of T)
    fullName.vb: System.IEquatable(Of T)
    name.vb: IEquatable(Of T)
    spec.csharp:
      - uid: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        fullName: System.IEquatable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.IEquatable`1
        name: IEquatable
        nameWithType: IEquatable
        fullName: System.IEquatable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: DotFeather.VectorInt.X*
    commentId: Overload:DotFeather.VectorInt.X
    name: X
    nameWithType: VectorInt.X
    fullName: DotFeather.VectorInt.X
  - uid: System.Int32
    commentId: T:System.Int32
    parent: System
    isExternal: true
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - uid: DotFeather.VectorInt.Y*
    commentId: Overload:DotFeather.VectorInt.Y
    name: Y
    nameWithType: VectorInt.Y
    fullName: DotFeather.VectorInt.Y
  - uid: DotFeather.VectorInt.Magnitude*
    commentId: Overload:DotFeather.VectorInt.Magnitude
    name: Magnitude
    nameWithType: VectorInt.Magnitude
    fullName: DotFeather.VectorInt.Magnitude
  - uid: System.Single
    commentId: T:System.Single
    parent: System
    isExternal: true
    name: Single
    nameWithType: Single
    fullName: System.Single
  - uid: DotFeather.VectorInt.Normalized*
    commentId: Overload:DotFeather.VectorInt.Normalized
    name: Normalized
    nameWithType: VectorInt.Normalized
    fullName: DotFeather.VectorInt.Normalized
  - uid: DotFeather.Vector
    commentId: T:DotFeather.Vector
    parent: DotFeather
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - uid: DotFeather.VectorInt.#ctor*
    commentId: Overload:DotFeather.VectorInt.#ctor
    name: VectorInt
    nameWithType: VectorInt.VectorInt
    fullName: DotFeather.VectorInt.VectorInt
  - uid: DotFeather.VectorInt.op_Addition*
    commentId: Overload:DotFeather.VectorInt.op_Addition
    name: Addition
    nameWithType: VectorInt.Addition
    fullName: DotFeather.VectorInt.Addition
  - uid: DotFeather.VectorInt
    commentId: T:DotFeather.VectorInt
    parent: DotFeather
    name: VectorInt
    nameWithType: VectorInt
    fullName: DotFeather.VectorInt
  - uid: DotFeather.VectorInt.op_Subtraction*
    commentId: Overload:DotFeather.VectorInt.op_Subtraction
    name: Subtraction
    nameWithType: VectorInt.Subtraction
    fullName: DotFeather.VectorInt.Subtraction
  - uid: DotFeather.VectorInt.op_Multiply*
    commentId: Overload:DotFeather.VectorInt.op_Multiply
    name: Multiply
    nameWithType: VectorInt.Multiply
    fullName: DotFeather.VectorInt.Multiply
  - uid: DotFeather.VectorInt.op_Division*
    commentId: Overload:DotFeather.VectorInt.op_Division
    name: Division
    nameWithType: VectorInt.Division
    fullName: DotFeather.VectorInt.Division
  - uid: DotFeather.VectorInt.op_UnaryNegation*
    commentId: Overload:DotFeather.VectorInt.op_UnaryNegation
    name: UnaryNegation
    nameWithType: VectorInt.UnaryNegation
    fullName: DotFeather.VectorInt.UnaryNegation
  - uid: DotFeather.VectorInt.op_Implicit*
    commentId: Overload:DotFeather.VectorInt.op_Implicit
    name: Implicit
    nameWithType: VectorInt.Implicit
    fullName: DotFeather.VectorInt.Implicit
    nameWithType.vb: VectorInt.Widening
    fullName.vb: DotFeather.VectorInt.Widening
    name.vb: Widening
  - uid: DotFeather.VectorInt.op_Equality*
    commentId: Overload:DotFeather.VectorInt.op_Equality
    name: Equality
    nameWithType: VectorInt.Equality
    fullName: DotFeather.VectorInt.Equality
  - uid: System.Boolean
    commentId: T:System.Boolean
    parent: System
    isExternal: true
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - uid: DotFeather.VectorInt.op_Inequality*
    commentId: Overload:DotFeather.VectorInt.op_Inequality
    name: Inequality
    nameWithType: VectorInt.Inequality
    fullName: DotFeather.VectorInt.Inequality
  - uid: DotFeather.VectorInt.Angle*
    commentId: Overload:DotFeather.VectorInt.Angle
    name: Angle
    nameWithType: VectorInt.Angle
    fullName: DotFeather.VectorInt.Angle
  - uid: DotFeather.VectorInt.Distance*
    commentId: Overload:DotFeather.VectorInt.Distance
    name: Distance
    nameWithType: VectorInt.Distance
    fullName: DotFeather.VectorInt.Distance
  - uid: System.ValueType.Equals(System.Object)
    commentId: M:System.ValueType.Equals(System.Object)
    parent: System.ValueType
    isExternal: true
    name: Equals(Object)
    nameWithType: ValueType.Equals(Object)
    fullName: System.ValueType.Equals(System.Object)
    spec.csharp:
      - uid: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        fullName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.ValueType.Equals(System.Object)
        name: Equals
        nameWithType: ValueType.Equals
        fullName: System.ValueType.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.VectorInt.Equals*
    commentId: Overload:DotFeather.VectorInt.Equals
    name: Equals
    nameWithType: VectorInt.Equals
    fullName: DotFeather.VectorInt.Equals
  - uid: System.ValueType
    commentId: T:System.ValueType
    parent: System
    isExternal: true
    name: ValueType
    nameWithType: ValueType
    fullName: System.ValueType
  - uid: System.IEquatable{DotFeather.VectorInt}.Equals(DotFeather.VectorInt)
    commentId: M:System.IEquatable{DotFeather.VectorInt}.Equals(DotFeather.VectorInt)
    parent: System.IEquatable{DotFeather.VectorInt}
    definition: System.IEquatable`1.Equals(`0)
    name: Equals(VectorInt)
    nameWithType: IEquatable<VectorInt>.Equals(VectorInt)
    fullName: System.IEquatable<DotFeather.VectorInt>.Equals(DotFeather.VectorInt)
    nameWithType.vb: IEquatable(Of VectorInt).Equals(VectorInt)
    fullName.vb: System.IEquatable(Of DotFeather.VectorInt).Equals(DotFeather.VectorInt)
    spec.csharp:
      - uid: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<VectorInt>.Equals
        fullName: System.IEquatable<DotFeather.VectorInt>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: DotFeather.VectorInt
        name: VectorInt
        nameWithType: VectorInt
        fullName: DotFeather.VectorInt
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of VectorInt).Equals
        fullName: System.IEquatable(Of DotFeather.VectorInt).Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: DotFeather.VectorInt
        name: VectorInt
        nameWithType: VectorInt
        fullName: DotFeather.VectorInt
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.IEquatable`1.Equals(`0)
    commentId: M:System.IEquatable`1.Equals(`0)
    isExternal: true
    name: Equals(T)
    nameWithType: IEquatable<T>.Equals(T)
    fullName: System.IEquatable<T>.Equals(T)
    nameWithType.vb: IEquatable(Of T).Equals(T)
    fullName.vb: System.IEquatable(Of T).Equals(T)
    spec.csharp:
      - uid: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable<T>.Equals
        fullName: System.IEquatable<T>.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.IEquatable`1.Equals(`0)
        name: Equals
        nameWithType: IEquatable(Of T).Equals
        fullName: System.IEquatable(Of T).Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.ValueType.GetHashCode
    commentId: M:System.ValueType.GetHashCode
    parent: System.ValueType
    isExternal: true
    name: GetHashCode()
    nameWithType: ValueType.GetHashCode()
    fullName: System.ValueType.GetHashCode()
    spec.csharp:
      - uid: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        fullName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.ValueType.GetHashCode
        name: GetHashCode
        nameWithType: ValueType.GetHashCode
        fullName: System.ValueType.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.VectorInt.GetHashCode*
    commentId: Overload:DotFeather.VectorInt.GetHashCode
    name: GetHashCode
    nameWithType: VectorInt.GetHashCode
    fullName: DotFeather.VectorInt.GetHashCode
  - uid: DotFeather.VectorInt.Deconstruct*
    commentId: Overload:DotFeather.VectorInt.Deconstruct
    name: Deconstruct
    nameWithType: VectorInt.Deconstruct
    fullName: DotFeather.VectorInt.Deconstruct
  - uid: System.ValueType.ToString
    commentId: M:System.ValueType.ToString
    parent: System.ValueType
    isExternal: true
    name: ToString()
    nameWithType: ValueType.ToString()
    fullName: System.ValueType.ToString()
    spec.csharp:
      - uid: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        fullName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.ValueType.ToString
        name: ToString
        nameWithType: ValueType.ToString
        fullName: System.ValueType.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.VectorInt.ToString*
    commentId: Overload:DotFeather.VectorInt.ToString
    name: ToString
    nameWithType: VectorInt.ToString
    fullName: DotFeather.VectorInt.ToString
  - uid: System.String
    commentId: T:System.String
    parent: System
    isExternal: true
    name: String
    nameWithType: String
    fullName: System.String
