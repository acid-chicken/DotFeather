### YamlMime:ManagedReference
items:
  - uid: DotFeather.SpaceConverter
    commentId: T:DotFeather.SpaceConverter
    id: SpaceConverter
    parent: DotFeather
    children:
      - DotFeather.SpaceConverter.ToViewportPoint(DotFeather.Vector,System.Single,System.Single)
      - DotFeather.SpaceConverter.ToViewportPoint(System.ValueTuple{System.Single,System.Single},System.Single,System.Single)
    langs:
      - csharp
      - vb
    name: SpaceConverter
    nameWithType: SpaceConverter
    fullName: DotFeather.SpaceConverter
    type: Class
    source:
      remote:
        path: DotFeather/Helpers/SpaceConverter.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: SpaceConverter
      path: ../DotFeather/Helpers/SpaceConverter.cs
      startLine: 8
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\n座標系変換の為のメソッドを提供します。\n"
    example: []
    syntax:
      content: public static class SpaceConverter
      content.vb: Public Module SpaceConverter
    inheritance:
      - System.Object
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - static
      - class
    modifiers.vb:
      - Public
      - Module
  - uid: DotFeather.SpaceConverter.ToViewportPoint(DotFeather.Vector,System.Single,System.Single)
    commentId: M:DotFeather.SpaceConverter.ToViewportPoint(DotFeather.Vector,System.Single,System.Single)
    id: ToViewportPoint(DotFeather.Vector,System.Single,System.Single)
    isExtensionMethod: true
    parent: DotFeather.SpaceConverter
    langs:
      - csharp
      - vb
    name: ToViewportPoint(Vector, Single, Single)
    nameWithType: SpaceConverter.ToViewportPoint(Vector, Single, Single)
    fullName: DotFeather.SpaceConverter.ToViewportPoint(DotFeather.Vector, System.Single, System.Single)
    type: Method
    source:
      remote:
        path: DotFeather/Helpers/SpaceConverter.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ToViewportPoint
      path: ../DotFeather/Helpers/SpaceConverter.cs
      startLine: 13
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nスクリーン座標をViewport座標に変換します。\n"
    example: []
    syntax:
      content: public static Vector ToViewportPoint(this Vector dp, float halfWidth, float halfHeight)
      parameters:
        - id: dp
          type: DotFeather.Vector
        - id: halfWidth
          type: System.Single
        - id: halfHeight
          type: System.Single
      return:
        type: DotFeather.Vector
      content.vb: >-
        <ExtensionAttribute>

        Public Shared Function ToViewportPoint(dp As Vector, halfWidth As Single, halfHeight As Single) As Vector
    overload: DotFeather.SpaceConverter.ToViewportPoint*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
  - uid: DotFeather.SpaceConverter.ToViewportPoint(System.ValueTuple{System.Single,System.Single},System.Single,System.Single)
    commentId: M:DotFeather.SpaceConverter.ToViewportPoint(System.ValueTuple{System.Single,System.Single},System.Single,System.Single)
    id: ToViewportPoint(System.ValueTuple{System.Single,System.Single},System.Single,System.Single)
    isExtensionMethod: true
    parent: DotFeather.SpaceConverter
    langs:
      - csharp
      - vb
    name: ToViewportPoint((Single, Single), Single, Single)
    nameWithType: SpaceConverter.ToViewportPoint((Single, Single), Single, Single)
    fullName: DotFeather.SpaceConverter.ToViewportPoint(System.ValueTuple<System.Single, System.Single>, System.Single, System.Single)
    type: Method
    source:
      remote:
        path: DotFeather/Helpers/SpaceConverter.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ToViewportPoint
      path: ../DotFeather/Helpers/SpaceConverter.cs
      startLine: 19
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nスクリーン座標をViewport座標に変換します。\n"
    example: []
    syntax:
      content: public static (float, float) ToViewportPoint(this (float, float) dp, float halfWidth, float halfHeight)
      parameters:
        - id: dp
          type: System.ValueTuple{System.Single,System.Single}
        - id: halfWidth
          type: System.Single
        - id: halfHeight
          type: System.Single
      return:
        type: System.ValueTuple{System.Single,System.Single}
      content.vb: >-
        <ExtensionAttribute>

        Public Shared Function ToViewportPoint(dp As(Single, Single), halfWidth As Single, halfHeight As Single) As(Single, Single)
    overload: DotFeather.SpaceConverter.ToViewportPoint*
    modifiers.csharp:
      - public
      - static
    modifiers.vb:
      - Public
      - Shared
    fullName.vb: DotFeather.SpaceConverter.ToViewportPoint(System.ValueTuple(Of System.Single, System.Single), System.Single, System.Single)
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.SpaceConverter.ToViewportPoint*
    commentId: Overload:DotFeather.SpaceConverter.ToViewportPoint
    name: ToViewportPoint
    nameWithType: SpaceConverter.ToViewportPoint
    fullName: DotFeather.SpaceConverter.ToViewportPoint
  - uid: DotFeather.Vector
    commentId: T:DotFeather.Vector
    parent: DotFeather
    name: Vector
    nameWithType: Vector
    fullName: DotFeather.Vector
  - uid: System.Single
    commentId: T:System.Single
    parent: System
    isExternal: true
    name: Single
    nameWithType: Single
    fullName: System.Single
  - uid: System.ValueTuple{System.Single,System.Single}
    commentId: T:System.ValueTuple{System.Single,System.Single}
    parent: System
    isExternal: true
    name: ValueTuple<Single, Single>
    nameWithType: ValueTuple<Single, Single>
    fullName: System.ValueTuple<System.Single, System.Single>
    nameWithType.vb: ValueTuple(Of Single, Single)
    fullName.vb: System.ValueTuple(Of System.Single, System.Single)
    name.vb: ValueTuple(Of Single, Single)
    spec.csharp:
      - uid: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        fullName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Single
        name: Single
        nameWithType: Single
        fullName: System.Single
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Single
        name: Single
        nameWithType: Single
        fullName: System.Single
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.ValueTuple`2
        name: ValueTuple
        nameWithType: ValueTuple
        fullName: System.ValueTuple
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Single
        name: Single
        nameWithType: Single
        fullName: System.Single
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Single
        name: Single
        nameWithType: Single
        fullName: System.Single
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
