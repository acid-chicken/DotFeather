### YamlMime:ManagedReference
items:
  - uid: DotFeather.AudioPlayer
    commentId: T:DotFeather.AudioPlayer
    id: AudioPlayer
    parent: DotFeather
    children:
      - DotFeather.AudioPlayer.#ctor
      - DotFeather.AudioPlayer.Dispose
      - DotFeather.AudioPlayer.Gain
      - DotFeather.AudioPlayer.IsPlaying
      - DotFeather.AudioPlayer.Length
      - DotFeather.AudioPlayer.LengthInSamples
      - DotFeather.AudioPlayer.Pitch
      - DotFeather.AudioPlayer.Play(DotFeather.IAudioSource,System.Nullable{System.Int32})
      - DotFeather.AudioPlayer.PlayAsync(DotFeather.IAudioSource,System.Nullable{System.Int32})
      - DotFeather.AudioPlayer.PlayOneShotAsync(DotFeather.IAudioSource)
      - DotFeather.AudioPlayer.Stop(System.Single)
      - DotFeather.AudioPlayer.Time
      - DotFeather.AudioPlayer.TimeInSamples
    langs:
      - csharp
      - vb
    name: AudioPlayer
    nameWithType: AudioPlayer
    fullName: DotFeather.AudioPlayer
    type: Class
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: AudioPlayer
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 15
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nProvides audio source playback functionality.\n"
    example: []
    syntax:
      content: "public class AudioPlayer : IDisposable"
      content.vb: >-
        Public Class AudioPlayer
            Implements IDisposable
    inheritance:
      - System.Object
    implements:
      - System.IDisposable
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - class
    modifiers.vb:
      - Public
      - Class
  - uid: DotFeather.AudioPlayer.#ctor
    commentId: M:DotFeather.AudioPlayer.#ctor
    id: "#ctor"
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: AudioPlayer()
    nameWithType: AudioPlayer.AudioPlayer()
    fullName: DotFeather.AudioPlayer.AudioPlayer()
    type: Constructor
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: .ctor
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 20
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nInitialize a new instance of <xref href=\"DotFeather.AudioPlayer\" data-throw-if-not-resolved=\"false\"></xref> .\n"
    example: []
    syntax:
      content: public AudioPlayer()
      content.vb: Public Sub New
    overload: DotFeather.AudioPlayer.#ctor*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.AudioPlayer.Gain
    commentId: P:DotFeather.AudioPlayer.Gain
    id: Gain
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Gain
    nameWithType: AudioPlayer.Gain
    fullName: DotFeather.AudioPlayer.Gain
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Gain
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 30
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set volume.\n"
    example: []
    syntax:
      content: public float Gain { get; set; }
      parameters: []
      return:
        type: System.Single
        description: Volume range in 0.0 ~ 1.0.
      content.vb: Public Property Gain As Single
    overload: DotFeather.AudioPlayer.Gain*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.AudioPlayer.Pitch
    commentId: P:DotFeather.AudioPlayer.Pitch
    id: Pitch
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Pitch
    nameWithType: AudioPlayer.Pitch
    fullName: DotFeather.AudioPlayer.Pitch
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Pitch
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 45
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet or set pitch of this player.\n"
    example: []
    syntax:
      content: public float Pitch { get; set; }
      parameters: []
      return:
        type: System.Single
        description: Pitch ratio value. Default is 1.
      content.vb: Public Property Pitch As Single
    overload: DotFeather.AudioPlayer.Pitch*
    modifiers.csharp:
      - public
      - get
      - set
    modifiers.vb:
      - Public
  - uid: DotFeather.AudioPlayer.IsPlaying
    commentId: P:DotFeather.AudioPlayer.IsPlaying
    id: IsPlaying
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: IsPlaying
    nameWithType: AudioPlayer.IsPlaying
    fullName: DotFeather.AudioPlayer.IsPlaying
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: IsPlaying
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 50
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet whether this player is playingã€‚\n"
    example: []
    syntax:
      content: public bool IsPlaying { get; }
      parameters: []
      return:
        type: System.Boolean
      content.vb: Public ReadOnly Property IsPlaying As Boolean
    overload: DotFeather.AudioPlayer.IsPlaying*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.AudioPlayer.Time
    commentId: P:DotFeather.AudioPlayer.Time
    id: Time
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Time
    nameWithType: AudioPlayer.Time
    fullName: DotFeather.AudioPlayer.Time
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Time
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 55
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet current playing time of this player in milliseconds.\n"
    example: []
    syntax:
      content: public int Time { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public ReadOnly Property Time As Integer
    overload: DotFeather.AudioPlayer.Time*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.AudioPlayer.TimeInSamples
    commentId: P:DotFeather.AudioPlayer.TimeInSamples
    id: TimeInSamples
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: TimeInSamples
    nameWithType: AudioPlayer.TimeInSamples
    fullName: DotFeather.AudioPlayer.TimeInSamples
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: TimeInSamples
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 60
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet current playing time of this player in samples.\n"
    example: []
    syntax:
      content: public int TimeInSamples { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public ReadOnly Property TimeInSamples As Integer
    overload: DotFeather.AudioPlayer.TimeInSamples*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.AudioPlayer.Length
    commentId: P:DotFeather.AudioPlayer.Length
    id: Length
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Length
    nameWithType: AudioPlayer.Length
    fullName: DotFeather.AudioPlayer.Length
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Length
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 65
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet length of loaded audio in milliseconds.\n"
    example: []
    syntax:
      content: public int Length { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public ReadOnly Property Length As Integer
    overload: DotFeather.AudioPlayer.Length*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.AudioPlayer.LengthInSamples
    commentId: P:DotFeather.AudioPlayer.LengthInSamples
    id: LengthInSamples
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: LengthInSamples
    nameWithType: AudioPlayer.LengthInSamples
    fullName: DotFeather.AudioPlayer.LengthInSamples
    type: Property
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: LengthInSamples
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 70
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet length of loaded audio in samples.\n"
    example: []
    syntax:
      content: public int LengthInSamples { get; }
      parameters: []
      return:
        type: System.Int32
      content.vb: Public ReadOnly Property LengthInSamples As Integer
    overload: DotFeather.AudioPlayer.LengthInSamples*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.AudioPlayer.PlayAsync(DotFeather.IAudioSource,System.Nullable{System.Int32})
    commentId: M:DotFeather.AudioPlayer.PlayAsync(DotFeather.IAudioSource,System.Nullable{System.Int32})
    id: PlayAsync(DotFeather.IAudioSource,System.Nullable{System.Int32})
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: PlayAsync(IAudioSource, Nullable<Int32>)
    nameWithType: AudioPlayer.PlayAsync(IAudioSource, Nullable<Int32>)
    fullName: DotFeather.AudioPlayer.PlayAsync(DotFeather.IAudioSource, System.Nullable<System.Int32>)
    type: Method
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: PlayAsync
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 77
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nStart playing.\n"
    example: []
    syntax:
      content: public Task PlayAsync(IAudioSource source, int? loop = default(int? ))
      parameters:
        - id: source
          type: DotFeather.IAudioSource
          description: A <xref href="DotFeather.IAudioSource" data-throw-if-not-resolved="false"></xref> to play.
        - id: loop
          type: System.Nullable{System.Int32}
          description: Sample number of loop point. To disable loop, specify<code>null</code>.
      return:
        type: System.Threading.Tasks.Task
      content.vb: Public Function PlayAsync(source As IAudioSource, loop As Integer? = Nothing) As Task
    overload: DotFeather.AudioPlayer.PlayAsync*
    nameWithType.vb: AudioPlayer.PlayAsync(IAudioSource, Nullable(Of Int32))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.AudioPlayer.PlayAsync(DotFeather.IAudioSource, System.Nullable(Of System.Int32))
    name.vb: PlayAsync(IAudioSource, Nullable(Of Int32))
  - uid: DotFeather.AudioPlayer.Play(DotFeather.IAudioSource,System.Nullable{System.Int32})
    commentId: M:DotFeather.AudioPlayer.Play(DotFeather.IAudioSource,System.Nullable{System.Int32})
    id: Play(DotFeather.IAudioSource,System.Nullable{System.Int32})
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Play(IAudioSource, Nullable<Int32>)
    nameWithType: AudioPlayer.Play(IAudioSource, Nullable<Int32>)
    fullName: DotFeather.AudioPlayer.Play(DotFeather.IAudioSource, System.Nullable<System.Int32>)
    type: Method
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Play
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 89
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nStart playing.\n"
    example: []
    syntax:
      content: public void Play(IAudioSource source, int? loop = default(int? ))
      parameters:
        - id: source
          type: DotFeather.IAudioSource
          description: A <xref href="DotFeather.IAudioSource" data-throw-if-not-resolved="false"></xref> to play.
        - id: loop
          type: System.Nullable{System.Int32}
          description: Sample number of loop point. To disable loop, specify<code>null</code>.
      content.vb: Public Sub Play(source As IAudioSource, loop As Integer? = Nothing)
    overload: DotFeather.AudioPlayer.Play*
    nameWithType.vb: AudioPlayer.Play(IAudioSource, Nullable(Of Int32))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.AudioPlayer.Play(DotFeather.IAudioSource, System.Nullable(Of System.Int32))
    name.vb: Play(IAudioSource, Nullable(Of Int32))
  - uid: DotFeather.AudioPlayer.Stop(System.Single)
    commentId: M:DotFeather.AudioPlayer.Stop(System.Single)
    id: Stop(System.Single)
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Stop(Single)
    nameWithType: AudioPlayer.Stop(Single)
    fullName: DotFeather.AudioPlayer.Stop(System.Single)
    type: Method
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Stop
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 99
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nStop playing.\n"
    example: []
    syntax:
      content: public void Stop(float time = 0F)
      parameters:
        - id: time
          type: System.Single
          description: Fade-out time. Specify 0 to stop soon.
      content.vb: Public Sub Stop(time As Single = 0F)
    overload: DotFeather.AudioPlayer.Stop*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.AudioPlayer.PlayOneShotAsync(DotFeather.IAudioSource)
    commentId: M:DotFeather.AudioPlayer.PlayOneShotAsync(DotFeather.IAudioSource)
    id: PlayOneShotAsync(DotFeather.IAudioSource)
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: PlayOneShotAsync(IAudioSource)
    nameWithType: AudioPlayer.PlayOneShotAsync(IAudioSource)
    fullName: DotFeather.AudioPlayer.PlayOneShotAsync(DotFeather.IAudioSource)
    type: Method
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: PlayOneShotAsync
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 133
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nPlay specified <xref href=\"DotFeather.IAudioSource\" data-throw-if-not-resolved=\"false\"></xref> instantly.\n"
    example: []
    syntax:
      content: public Task PlayOneShotAsync(IAudioSource source)
      parameters:
        - id: source
          type: DotFeather.IAudioSource
          description: <xref href="DotFeather.IAudioSource" data-throw-if-not-resolved="false"></xref> to play.
      return:
        type: System.Threading.Tasks.Task
        description: ""
      content.vb: Public Function PlayOneShotAsync(source As IAudioSource) As Task
    overload: DotFeather.AudioPlayer.PlayOneShotAsync*
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
  - uid: DotFeather.AudioPlayer.Dispose
    commentId: M:DotFeather.AudioPlayer.Dispose
    id: Dispose
    parent: DotFeather.AudioPlayer
    langs:
      - csharp
      - vb
    name: Dispose()
    nameWithType: AudioPlayer.Dispose()
    fullName: DotFeather.AudioPlayer.Dispose()
    type: Method
    source:
      remote:
        path: DotFeather/Audio/AudioPlayer.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Dispose
      path: ../DotFeather/Audio/AudioPlayer.cs
      startLine: 154
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nDispose.\n"
    example: []
    syntax:
      content: public void Dispose()
      content.vb: Public Sub Dispose
    overload: DotFeather.AudioPlayer.Dispose*
    implements:
      - System.IDisposable.Dispose
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: System.IDisposable
    commentId: T:System.IDisposable
    parent: System
    isExternal: true
    name: IDisposable
    nameWithType: IDisposable
    fullName: System.IDisposable
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.AudioPlayer
    commentId: T:DotFeather.AudioPlayer
    name: AudioPlayer
    nameWithType: AudioPlayer
    fullName: DotFeather.AudioPlayer
  - uid: DotFeather.AudioPlayer.#ctor*
    commentId: Overload:DotFeather.AudioPlayer.#ctor
    name: AudioPlayer
    nameWithType: AudioPlayer.AudioPlayer
    fullName: DotFeather.AudioPlayer.AudioPlayer
  - uid: DotFeather.AudioPlayer.Gain*
    commentId: Overload:DotFeather.AudioPlayer.Gain
    name: Gain
    nameWithType: AudioPlayer.Gain
    fullName: DotFeather.AudioPlayer.Gain
  - uid: System.Single
    commentId: T:System.Single
    parent: System
    isExternal: true
    name: Single
    nameWithType: Single
    fullName: System.Single
  - uid: DotFeather.AudioPlayer.Pitch*
    commentId: Overload:DotFeather.AudioPlayer.Pitch
    name: Pitch
    nameWithType: AudioPlayer.Pitch
    fullName: DotFeather.AudioPlayer.Pitch
  - uid: DotFeather.AudioPlayer.IsPlaying*
    commentId: Overload:DotFeather.AudioPlayer.IsPlaying
    name: IsPlaying
    nameWithType: AudioPlayer.IsPlaying
    fullName: DotFeather.AudioPlayer.IsPlaying
  - uid: System.Boolean
    commentId: T:System.Boolean
    parent: System
    isExternal: true
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - uid: DotFeather.AudioPlayer.Time*
    commentId: Overload:DotFeather.AudioPlayer.Time
    name: Time
    nameWithType: AudioPlayer.Time
    fullName: DotFeather.AudioPlayer.Time
  - uid: System.Int32
    commentId: T:System.Int32
    parent: System
    isExternal: true
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - uid: DotFeather.AudioPlayer.TimeInSamples*
    commentId: Overload:DotFeather.AudioPlayer.TimeInSamples
    name: TimeInSamples
    nameWithType: AudioPlayer.TimeInSamples
    fullName: DotFeather.AudioPlayer.TimeInSamples
  - uid: DotFeather.AudioPlayer.Length*
    commentId: Overload:DotFeather.AudioPlayer.Length
    name: Length
    nameWithType: AudioPlayer.Length
    fullName: DotFeather.AudioPlayer.Length
  - uid: DotFeather.AudioPlayer.LengthInSamples*
    commentId: Overload:DotFeather.AudioPlayer.LengthInSamples
    name: LengthInSamples
    nameWithType: AudioPlayer.LengthInSamples
    fullName: DotFeather.AudioPlayer.LengthInSamples
  - uid: DotFeather.IAudioSource
    commentId: T:DotFeather.IAudioSource
    parent: DotFeather
    name: IAudioSource
    nameWithType: IAudioSource
    fullName: DotFeather.IAudioSource
  - uid: DotFeather.AudioPlayer.PlayAsync*
    commentId: Overload:DotFeather.AudioPlayer.PlayAsync
    name: PlayAsync
    nameWithType: AudioPlayer.PlayAsync
    fullName: DotFeather.AudioPlayer.PlayAsync
  - uid: System.Nullable{System.Int32}
    commentId: T:System.Nullable{System.Int32}
    parent: System
    definition: System.Nullable`1
    name: Nullable<Int32>
    nameWithType: Nullable<Int32>
    fullName: System.Nullable<System.Int32>
    nameWithType.vb: Nullable(Of Int32)
    fullName.vb: System.Nullable(Of System.Int32)
    name.vb: Nullable(Of Int32)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Int32
        name: Int32
        nameWithType: Int32
        fullName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Threading.Tasks.Task
    commentId: T:System.Threading.Tasks.Task
    parent: System.Threading.Tasks
    isExternal: true
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - uid: System.Nullable`1
    commentId: T:System.Nullable`1
    isExternal: true
    name: Nullable<T>
    nameWithType: Nullable<T>
    fullName: System.Nullable<T>
    nameWithType.vb: Nullable(Of T)
    fullName.vb: System.Nullable(Of T)
    name.vb: Nullable(Of T)
    spec.csharp:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        fullName: System.Nullable
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Threading.Tasks
    commentId: N:System.Threading.Tasks
    isExternal: true
    name: System.Threading.Tasks
    nameWithType: System.Threading.Tasks
    fullName: System.Threading.Tasks
  - uid: DotFeather.AudioPlayer.Play*
    commentId: Overload:DotFeather.AudioPlayer.Play
    name: Play
    nameWithType: AudioPlayer.Play
    fullName: DotFeather.AudioPlayer.Play
  - uid: DotFeather.AudioPlayer.Stop*
    commentId: Overload:DotFeather.AudioPlayer.Stop
    name: Stop
    nameWithType: AudioPlayer.Stop
    fullName: DotFeather.AudioPlayer.Stop
  - uid: DotFeather.AudioPlayer.PlayOneShotAsync*
    commentId: Overload:DotFeather.AudioPlayer.PlayOneShotAsync
    name: PlayOneShotAsync
    nameWithType: AudioPlayer.PlayOneShotAsync
    fullName: DotFeather.AudioPlayer.PlayOneShotAsync
  - uid: DotFeather.AudioPlayer.Dispose*
    commentId: Overload:DotFeather.AudioPlayer.Dispose
    name: Dispose
    nameWithType: AudioPlayer.Dispose
    fullName: DotFeather.AudioPlayer.Dispose
  - uid: System.IDisposable.Dispose
    commentId: M:System.IDisposable.Dispose
    parent: System.IDisposable
    isExternal: true
    name: Dispose()
    nameWithType: IDisposable.Dispose()
    fullName: System.IDisposable.Dispose()
    spec.csharp:
      - uid: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        fullName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.IDisposable.Dispose
        name: Dispose
        nameWithType: IDisposable.Dispose
        fullName: System.IDisposable.Dispose
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
