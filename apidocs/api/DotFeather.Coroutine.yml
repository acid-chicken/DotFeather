### YamlMime:ManagedReference
items:
  - uid: DotFeather.Coroutine
    commentId: T:DotFeather.Coroutine
    id: Coroutine
    parent: DotFeather
    children:
      - DotFeather.Coroutine.Error(System.Action{System.Exception})
      - DotFeather.Coroutine.ErrorAction
      - DotFeather.Coroutine.IsRunning
      - DotFeather.Coroutine.KeepWaiting
      - DotFeather.Coroutine.Then(System.Action{System.Object})
      - DotFeather.Coroutine.ThenAction
    langs:
      - csharp
      - vb
    name: Coroutine
    nameWithType: Coroutine
    fullName: DotFeather.Coroutine
    type: Class
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Coroutine
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 8
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nCoroutine class.\n"
    example: []
    syntax:
      content: "public class Coroutine : YieldInstruction"
      content.vb: >-
        Public Class Coroutine
            Inherits YieldInstruction
    inheritance:
      - System.Object
      - DotFeather.YieldInstruction
    inheritedMembers:
      - System.Object.Equals(System.Object)
      - System.Object.Equals(System.Object,System.Object)
      - System.Object.GetHashCode
      - System.Object.GetType
      - System.Object.MemberwiseClone
      - System.Object.ReferenceEquals(System.Object,System.Object)
      - System.Object.ToString
    modifiers.csharp:
      - public
      - class
    modifiers.vb:
      - Public
      - Class
  - uid: DotFeather.Coroutine.IsRunning
    commentId: P:DotFeather.Coroutine.IsRunning
    id: IsRunning
    parent: DotFeather.Coroutine
    langs:
      - csharp
      - vb
    name: IsRunning
    nameWithType: Coroutine.IsRunning
    fullName: DotFeather.Coroutine.IsRunning
    type: Property
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: IsRunning
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 13
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet whether the coroutine is running.\n"
    example: []
    syntax:
      content: public bool IsRunning { get; }
      parameters: []
      return:
        type: System.Boolean
      content.vb: Public ReadOnly Property IsRunning As Boolean
    overload: DotFeather.Coroutine.IsRunning*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Coroutine.KeepWaiting
    commentId: P:DotFeather.Coroutine.KeepWaiting
    id: KeepWaiting
    parent: DotFeather.Coroutine
    langs:
      - csharp
      - vb
    name: KeepWaiting
    nameWithType: Coroutine.KeepWaiting
    fullName: DotFeather.Coroutine.KeepWaiting
    type: Property
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: KeepWaiting
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 15
    assemblies:
      - DotFeather
    namespace: DotFeather
    syntax:
      content: public override bool KeepWaiting { get; }
      parameters: []
      return:
        type: System.Boolean
      content.vb: Public Overrides ReadOnly Property KeepWaiting As Boolean
    overridden: DotFeather.YieldInstruction.KeepWaiting
    overload: DotFeather.Coroutine.KeepWaiting*
    modifiers.csharp:
      - public
      - override
      - get
    modifiers.vb:
      - Public
      - Overrides
      - ReadOnly
  - uid: DotFeather.Coroutine.ThenAction
    commentId: P:DotFeather.Coroutine.ThenAction
    id: ThenAction
    parent: DotFeather.Coroutine
    langs:
      - csharp
      - vb
    name: ThenAction
    nameWithType: Coroutine.ThenAction
    fullName: DotFeather.Coroutine.ThenAction
    type: Property
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ThenAction
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 20
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the callback to execute after exiting.\n"
    example: []
    syntax:
      content: public Action<object> ThenAction { get; }
      parameters: []
      return:
        type: System.Action{System.Object}
      content.vb: Public ReadOnly Property ThenAction As Action(Of Object)
    overload: DotFeather.Coroutine.ThenAction*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Coroutine.ErrorAction
    commentId: P:DotFeather.Coroutine.ErrorAction
    id: ErrorAction
    parent: DotFeather.Coroutine
    langs:
      - csharp
      - vb
    name: ErrorAction
    nameWithType: Coroutine.ErrorAction
    fullName: DotFeather.Coroutine.ErrorAction
    type: Property
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: ErrorAction
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 25
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nGet the callback that executes when an unhandled exception occurs.\n"
    example: []
    syntax:
      content: public Action<Exception> ErrorAction { get; }
      parameters: []
      return:
        type: System.Action{System.Exception}
      content.vb: Public ReadOnly Property ErrorAction As Action(Of Exception)
    overload: DotFeather.Coroutine.ErrorAction*
    modifiers.csharp:
      - public
      - get
    modifiers.vb:
      - Public
      - ReadOnly
  - uid: DotFeather.Coroutine.Then(System.Action{System.Object})
    commentId: M:DotFeather.Coroutine.Then(System.Action{System.Object})
    id: Then(System.Action{System.Object})
    parent: DotFeather.Coroutine
    langs:
      - csharp
      - vb
    name: Then(Action<Object>)
    nameWithType: Coroutine.Then(Action<Object>)
    fullName: DotFeather.Coroutine.Then(System.Action<System.Object>)
    type: Method
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Then
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 47
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nSet the callback after the coroutine ends.\n"
    example: []
    syntax:
      content: public Coroutine Then(Action<object> callback)
      parameters:
        - id: callback
          type: System.Action{System.Object}
          description: Callback. The argument is the last <code>yield return</code>ed value of the coroutine.
      return:
        type: DotFeather.Coroutine
        description: ""
      content.vb: Public Function Then(callback As Action(Of Object)) As Coroutine
    overload: DotFeather.Coroutine.Then*
    nameWithType.vb: Coroutine.Then(Action(Of Object))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Coroutine.Then(System.Action(Of System.Object))
    name.vb: Then(Action(Of Object))
  - uid: DotFeather.Coroutine.Error(System.Action{System.Exception})
    commentId: M:DotFeather.Coroutine.Error(System.Action{System.Exception})
    id: Error(System.Action{System.Exception})
    parent: DotFeather.Coroutine
    langs:
      - csharp
      - vb
    name: Error(Action<Exception>)
    nameWithType: Coroutine.Error(Action<Exception>)
    fullName: DotFeather.Coroutine.Error(System.Action<System.Exception>)
    type: Method
    source:
      remote:
        path: DotFeather/Coroutines/Coroutine.cs
        branch: master
        repo: https://github.com/xeltica/dotfeather
      id: Error
      path: ../DotFeather/Coroutines/Coroutine.cs
      startLine: 59
    assemblies:
      - DotFeather
    namespace: DotFeather
    summary: "\nSet the callback when the coroutine throws an exception\n"
    example: []
    syntax:
      content: public Coroutine Error(Action<Exception> callback)
      parameters:
        - id: callback
          type: System.Action{System.Exception}
          description: Callback.
      return:
        type: DotFeather.Coroutine
        description: ""
      content.vb: Public Function Error(callback As Action(Of Exception)) As Coroutine
    overload: DotFeather.Coroutine.Error*
    nameWithType.vb: Coroutine.Error(Action(Of Exception))
    modifiers.csharp:
      - public
    modifiers.vb:
      - Public
    fullName.vb: DotFeather.Coroutine.Error(System.Action(Of System.Exception))
    name.vb: Error(Action(Of Exception))
references:
  - uid: DotFeather
    commentId: N:DotFeather
    name: DotFeather
    nameWithType: DotFeather
    fullName: DotFeather
  - uid: System.Object
    commentId: T:System.Object
    parent: System
    isExternal: true
    name: Object
    nameWithType: Object
    fullName: System.Object
  - uid: DotFeather.YieldInstruction
    commentId: T:DotFeather.YieldInstruction
    parent: DotFeather
    name: YieldInstruction
    nameWithType: YieldInstruction
    fullName: DotFeather.YieldInstruction
  - uid: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object)
    nameWithType: Object.Equals(Object)
    fullName: System.Object.Equals(System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.Equals(System.Object,System.Object)
    commentId: M:System.Object.Equals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: Equals(Object, Object)
    nameWithType: Object.Equals(Object, Object)
    fullName: System.Object.Equals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        fullName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
    parent: System.Object
    isExternal: true
    name: GetHashCode()
    nameWithType: Object.GetHashCode()
    fullName: System.Object.GetHashCode()
    spec.csharp:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        fullName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.GetType
    commentId: M:System.Object.GetType
    parent: System.Object
    isExternal: true
    name: GetType()
    nameWithType: Object.GetType()
    fullName: System.Object.GetType()
    spec.csharp:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        fullName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.MemberwiseClone
    commentId: M:System.Object.MemberwiseClone
    parent: System.Object
    isExternal: true
    name: MemberwiseClone()
    nameWithType: Object.MemberwiseClone()
    fullName: System.Object.MemberwiseClone()
    spec.csharp:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        fullName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
    parent: System.Object
    isExternal: true
    name: ReferenceEquals(Object, Object)
    nameWithType: Object.ReferenceEquals(Object, Object)
    fullName: System.Object.ReferenceEquals(System.Object, System.Object)
    spec.csharp:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        fullName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ", "
        nameWithType: ", "
        fullName: ", "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Object.ToString
    commentId: M:System.Object.ToString
    parent: System.Object
    isExternal: true
    name: ToString()
    nameWithType: Object.ToString()
    fullName: System.Object.ToString()
    spec.csharp:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
    spec.vb:
      - uid: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        fullName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        fullName: (
      - name: )
        nameWithType: )
        fullName: )
  - uid: System
    commentId: N:System
    isExternal: true
    name: System
    nameWithType: System
    fullName: System
  - uid: DotFeather.Coroutine.IsRunning*
    commentId: Overload:DotFeather.Coroutine.IsRunning
    name: IsRunning
    nameWithType: Coroutine.IsRunning
    fullName: DotFeather.Coroutine.IsRunning
  - uid: System.Boolean
    commentId: T:System.Boolean
    parent: System
    isExternal: true
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - uid: DotFeather.YieldInstruction.KeepWaiting
    commentId: P:DotFeather.YieldInstruction.KeepWaiting
    parent: DotFeather.YieldInstruction
    name: KeepWaiting
    nameWithType: YieldInstruction.KeepWaiting
    fullName: DotFeather.YieldInstruction.KeepWaiting
  - uid: DotFeather.Coroutine.KeepWaiting*
    commentId: Overload:DotFeather.Coroutine.KeepWaiting
    name: KeepWaiting
    nameWithType: Coroutine.KeepWaiting
    fullName: DotFeather.Coroutine.KeepWaiting
  - uid: DotFeather.Coroutine.ThenAction*
    commentId: Overload:DotFeather.Coroutine.ThenAction
    name: ThenAction
    nameWithType: Coroutine.ThenAction
    fullName: DotFeather.Coroutine.ThenAction
  - uid: System.Action{System.Object}
    commentId: T:System.Action{System.Object}
    parent: System
    definition: System.Action`1
    name: Action<Object>
    nameWithType: Action<Object>
    fullName: System.Action<System.Object>
    nameWithType.vb: Action(Of Object)
    fullName.vb: System.Action(Of System.Object)
    name.vb: Action(Of Object)
    spec.csharp:
      - uid: System.Action`1
        name: Action
        nameWithType: Action
        fullName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Action`1
        name: Action
        nameWithType: Action
        fullName: System.Action
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Object
        name: Object
        nameWithType: Object
        fullName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: System.Action`1
    commentId: T:System.Action`1
    isExternal: true
    name: Action<T>
    nameWithType: Action<T>
    fullName: System.Action<T>
    nameWithType.vb: Action(Of T)
    fullName.vb: System.Action(Of T)
    name.vb: Action(Of T)
    spec.csharp:
      - uid: System.Action`1
        name: Action
        nameWithType: Action
        fullName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - name: T
        nameWithType: T
        fullName: T
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Action`1
        name: Action
        nameWithType: Action
        fullName: System.Action
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - name: T
        nameWithType: T
        fullName: T
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Coroutine.ErrorAction*
    commentId: Overload:DotFeather.Coroutine.ErrorAction
    name: ErrorAction
    nameWithType: Coroutine.ErrorAction
    fullName: DotFeather.Coroutine.ErrorAction
  - uid: System.Action{System.Exception}
    commentId: T:System.Action{System.Exception}
    parent: System
    definition: System.Action`1
    name: Action<Exception>
    nameWithType: Action<Exception>
    fullName: System.Action<System.Exception>
    nameWithType.vb: Action(Of Exception)
    fullName.vb: System.Action(Of System.Exception)
    name.vb: Action(Of Exception)
    spec.csharp:
      - uid: System.Action`1
        name: Action
        nameWithType: Action
        fullName: System.Action
        isExternal: true
      - name: <
        nameWithType: <
        fullName: <
      - uid: System.Exception
        name: Exception
        nameWithType: Exception
        fullName: System.Exception
        isExternal: true
      - name: ">"
        nameWithType: ">"
        fullName: ">"
    spec.vb:
      - uid: System.Action`1
        name: Action
        nameWithType: Action
        fullName: System.Action
        isExternal: true
      - name: "(Of "
        nameWithType: "(Of "
        fullName: "(Of "
      - uid: System.Exception
        name: Exception
        nameWithType: Exception
        fullName: System.Exception
        isExternal: true
      - name: )
        nameWithType: )
        fullName: )
  - uid: DotFeather.Coroutine.Then*
    commentId: Overload:DotFeather.Coroutine.Then
    name: Then
    nameWithType: Coroutine.Then
    fullName: DotFeather.Coroutine.Then
  - uid: DotFeather.Coroutine
    commentId: T:DotFeather.Coroutine
    parent: DotFeather
    name: Coroutine
    nameWithType: Coroutine
    fullName: DotFeather.Coroutine
  - uid: DotFeather.Coroutine.Error*
    commentId: Overload:DotFeather.Coroutine.Error
    name: Error
    nameWithType: Coroutine.Error
    fullName: DotFeather.Coroutine.Error
